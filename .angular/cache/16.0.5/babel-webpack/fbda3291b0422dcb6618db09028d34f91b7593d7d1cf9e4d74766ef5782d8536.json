{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/55219/Desktop/Studio-Val-em-conclusao/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"ngx-cookie-service\";\nimport * as i5 from \"./user.service\";\nconst AUTH_TOKEN_KEY = 'authToken';\nclass AuthService {\n  constructor(afAuth, afs, router, cookieService, userService) {\n    this.afAuth = afAuth;\n    this.afs = afs;\n    this.router = router;\n    this.cookieService = cookieService;\n    this.userService = userService;\n    this.isLoggedIn = false;\n    afAuth.authState.subscribe(user => {\n      this.isLoggedIn = !!user;\n      console.log('isLoggedIn:', this.isLoggedIn);\n    });\n  }\n  GoogleAuth() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      console.log('Método GoogleAuth chamado');\n      const user = yield _this.afAuth.currentUser;\n      if (!user) {\n        try {\n          const provider = new firebase.auth.GoogleAuthProvider();\n          console.log('Antes da chamada signInWithPopup');\n          const credential = yield _this.afAuth.signInWithPopup(provider);\n          console.log('Depois da chamada signInWithPopup', credential);\n          _this.isLoggedIn = true;\n          console.log('isLoggedIn definido como', _this.isLoggedIn);\n          yield _this.afAuth.setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n          _this.setAuthToken(credential.user?.uid || '');\n          console.log('Valor do authToken após o setAuthToken: ', _this.cookieService.get(AUTH_TOKEN_KEY));\n          console.log('URL da imagem do perfil do usuário:', credential.user?.photoURL);\n          const userData = {\n            displayName: credential.user?.displayName,\n            email: credential.user?.email,\n            photoURL: credential.user?.photoURL,\n            uid: credential.user?.uid,\n            lastLogin: firebase.firestore.FieldValue.serverTimestamp()\n          };\n          yield _this.userService.createUser(userData);\n          console.log(userData);\n        } catch (error) {\n          console.error('Erro na chamada signInWithPopup', error);\n        }\n      }\n      _this.router.navigate(['/agendamento']);\n    })();\n  }\n  logout() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.afAuth.signOut();\n      _this2.isLoggedIn = false;\n      console.log('isLoggedIn definido como', _this2.isLoggedIn);\n      _this2.cookieService.delete(AUTH_TOKEN_KEY);\n      alert('Você saiu da sua conta.');\n      console.log('isLoggedIn:', _this2.isLoggedIn);\n      _this2.router.navigate(['/']);\n    })();\n  }\n  isUserLoggedIn() {\n    const authToken = this.cookieService.get(AUTH_TOKEN_KEY);\n    console.log('Valor do authToken recuperado: ', authToken);\n    const isLoggedIn = !!authToken;\n    console.log('isUserLoggedIn:', isLoggedIn);\n    return isLoggedIn;\n  }\n  setAuthToken(authToken) {\n    console.log('Método setAuthToken chamado, authToken:', authToken);\n    const expirationDate = new Date();\n    const expiresIn = 86400; // tempo de expiração em segundos (1 dia)\n    expirationDate.setSeconds(expirationDate.getSeconds() + expiresIn);\n    this.cookieService.set(AUTH_TOKEN_KEY, authToken, expirationDate);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.CookieService), i0.ɵɵinject(i5.UserService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"mappings":"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","names":["firebase","AUTH_TOKEN_KEY","AuthService","constructor","afAuth","afs","router","cookieService","userService","isLoggedIn","authState","subscribe","user","console","log","GoogleAuth","_this","_asyncToGenerator","currentUser","provider","auth","GoogleAuthProvider","credential","signInWithPopup","setPersistence","Auth","Persistence","LOCAL","setAuthToken","uid","get","photoURL","userData","displayName","email","lastLogin","firestore","FieldValue","serverTimestamp","createUser","error","navigate","logout","_this2","signOut","delete","alert","isUserLoggedIn","authToken","expirationDate","Date","expiresIn","setSeconds","getSeconds","set","i0","ɵɵinject","i1","AngularFireAuth","i2","AngularFirestore","i3","Router","i4","CookieService","i5","UserService","factory","ɵfac","providedIn"],"sourceRoot":"","sources":["C:\\Users\\55219\\Desktop\\Studio-Val-em-conclusao\\src\\app\\services\\auth.service.ts"],"sourcesContent":["// auth.service.ts\r\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\r\nimport firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/auth';\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\r\nimport { Router } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport { UserService } from './user.service';\r\nimport { CookieService } from 'ngx-cookie-service';\r\n\r\nconst AUTH_TOKEN_KEY = 'authToken';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n\r\n  isLoggedIn: boolean = false;\r\n\r\n  constructor(\r\n    public afAuth: AngularFireAuth,\r\n    public afs: AngularFirestore,\r\n    public router: Router,\r\n    private cookieService: CookieService,\r\n    public userService: UserService\r\n  ) {\r\n    afAuth.authState.subscribe(user => {\r\n      this.isLoggedIn = !!user;\r\n      console.log('isLoggedIn:', this.isLoggedIn);\r\n    });\r\n  }\r\n\r\n  async GoogleAuth() {\r\n    console.log('Método GoogleAuth chamado');\r\n    const user = await this.afAuth.currentUser;\r\n\r\n    if (!user) {\r\n      try {\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n        console.log('Antes da chamada signInWithPopup');\r\n        const credential = await this.afAuth.signInWithPopup(provider);\r\n        console.log('Depois da chamada signInWithPopup', credential);\r\n\r\n        this.isLoggedIn = true;\r\n        console.log('isLoggedIn definido como', this.isLoggedIn);\r\n\r\n        await this.afAuth.setPersistence(firebase.auth.Auth.Persistence.LOCAL);\r\n\r\n        this.setAuthToken(credential.user?.uid || '');\r\n        console.log('Valor do authToken após o setAuthToken: ', this.cookieService.get(AUTH_TOKEN_KEY));\r\n\r\n        console.log('URL da imagem do perfil do usuário:', credential.user?.photoURL);\r\n\r\n        const userData = {\r\n          displayName: credential.user?.displayName,\r\n          email: credential.user?.email,\r\n          photoURL: credential.user?.photoURL,\r\n          uid: credential.user?.uid,\r\n          lastLogin: firebase.firestore.FieldValue.serverTimestamp()\r\n        };\r\n\r\n        await this.userService.createUser(userData);\r\n        console.log(userData);\r\n\r\n      } catch (error) {\r\n        console.error('Erro na chamada signInWithPopup', error);\r\n      }\r\n    }\r\n    this.router.navigate(['/agendamento']);\r\n  }\r\n\r\n  async logout() {\r\n    await this.afAuth.signOut();\r\n    this.isLoggedIn = false;\r\n    console.log('isLoggedIn definido como', this.isLoggedIn);\r\n\r\n    this.cookieService.delete(AUTH_TOKEN_KEY);\r\n    alert('Você saiu da sua conta.');\r\n    console.log('isLoggedIn:', this.isLoggedIn);\r\n\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  isUserLoggedIn(): boolean {\r\n    const authToken = this.cookieService.get(AUTH_TOKEN_KEY);\r\n    console.log('Valor do authToken recuperado: ', authToken);\r\n    const isLoggedIn = !!authToken;\r\n    console.log('isUserLoggedIn:', isLoggedIn);\r\n    return isLoggedIn;\r\n  }\r\n\r\n  private setAuthToken(authToken: string): void {\r\n    console.log('Método setAuthToken chamado, authToken:', authToken);\r\n    const expirationDate = new Date();\r\n    const expiresIn = 86400; // tempo de expiração em segundos (1 dia)\r\n    expirationDate.setSeconds(expirationDate.getSeconds() + expiresIn);\r\n    this.cookieService.set(AUTH_TOKEN_KEY, authToken, expirationDate);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}