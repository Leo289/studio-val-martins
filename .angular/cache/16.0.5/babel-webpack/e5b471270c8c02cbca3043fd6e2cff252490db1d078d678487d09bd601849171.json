{"ast":null,"code":"import { ErrorFactory, areCookiesEnabled, isIndexedDBAvailable, validateIndexedDBOpenable, getModularInstance, deepEqual } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport '@firebase/installations';\nconst name = \"@firebase/performance\";\nconst version = \"0.6.4\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nconst TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nconst TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nconst TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nconst OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\nconst FIRST_PAINT_COUNTER_NAME = '_fp';\nconst FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\nconst FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\nconst CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\nconst CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';\nconst SERVICE = 'performance';\nconst SERVICE_NAME = 'Performance';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst ERROR_DESCRIPTION_MAP = {\n  [\"trace started\" /* ErrorCode.TRACE_STARTED_BEFORE */]: 'Trace {$traceName} was started before.',\n  [\"trace stopped\" /* ErrorCode.TRACE_STOPPED_BEFORE */]: 'Trace {$traceName} is not running.',\n  [\"nonpositive trace startTime\" /* ErrorCode.NONPOSITIVE_TRACE_START_TIME */]: 'Trace {$traceName} startTime should be positive.',\n  [\"nonpositive trace duration\" /* ErrorCode.NONPOSITIVE_TRACE_DURATION */]: 'Trace {$traceName} duration should be positive.',\n  [\"no window\" /* ErrorCode.NO_WINDOW */]: 'Window is not available.',\n  [\"no app id\" /* ErrorCode.NO_APP_ID */]: 'App id is not available.',\n  [\"no project id\" /* ErrorCode.NO_PROJECT_ID */]: 'Project id is not available.',\n  [\"no api key\" /* ErrorCode.NO_API_KEY */]: 'Api key is not available.',\n  [\"invalid cc log\" /* ErrorCode.INVALID_CC_LOG */]: 'Attempted to queue invalid cc event',\n  [\"FB not default\" /* ErrorCode.FB_NOT_DEFAULT */]: 'Performance can only start when Firebase app instance is the default one.',\n  [\"RC response not ok\" /* ErrorCode.RC_NOT_OK */]: 'RC response is not ok',\n  [\"invalid attribute name\" /* ErrorCode.INVALID_ATTRIBUTE_NAME */]: 'Attribute name {$attributeName} is invalid.',\n  [\"invalid attribute value\" /* ErrorCode.INVALID_ATTRIBUTE_VALUE */]: 'Attribute value {$attributeValue} is invalid.',\n  [\"invalid custom metric name\" /* ErrorCode.INVALID_CUSTOM_METRIC_NAME */]: 'Custom metric name {$customMetricName} is invalid',\n  [\"invalid String merger input\" /* ErrorCode.INVALID_STRING_MERGER_PARAMETER */]: 'Input for String merger is invalid, contact support team to resolve.',\n  [\"already initialized\" /* ErrorCode.ALREADY_INITIALIZED */]: 'initializePerformance() has already been called with ' + 'different options. To avoid this error, call initializePerformance() with the ' + 'same options as when it was originally called, or call getPerformance() to return the' + ' already initialized instance.'\n};\nconst ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet apiInstance;\nlet windowInstance;\n/**\r\n * This class holds a reference to various browser related objects injected by\r\n * set methods.\r\n */\nclass Api {\n  constructor(window) {\n    this.window = window;\n    if (!window) {\n      throw ERROR_FACTORY.create(\"no window\" /* ErrorCode.NO_WINDOW */);\n    }\n\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n  getUrl() {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n  mark(name) {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  }\n  measure(measureName, mark1, mark2) {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  }\n  getEntriesByType(type) {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  }\n  getEntriesByName(name) {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  }\n  getTimeOrigin() {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return this.performance && (this.performance.timeOrigin || this.performance.timing.navigationStart);\n  }\n  requiredApisAvailable() {\n    if (!fetch || !Promise || !areCookiesEnabled()) {\n      consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.');\n      return false;\n    }\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n    return true;\n  }\n  setupObserver(entryType, callback) {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n    // Start observing the entry types you care about.\n    observer.observe({\n      entryTypes: [entryType]\n    });\n  }\n  static getInstance() {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  }\n}\nfunction setupApi(window) {\n  windowInstance = window;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet iid;\nfunction getIidPromise(installationsService) {\n  const iidPromise = installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then(iidVal => {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n// This method should be used after the iid is retrieved by getIidPromise method.\nfunction getIid() {\n  return iid;\n}\nfunction getAuthTokenPromise(installationsService) {\n  const authTokenPromise = installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then(authTokenVal => {});\n  return authTokenPromise;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction mergeStrings(part1, part2) {\n  const sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(\"invalid String merger input\" /* ErrorCode.INVALID_STRING_MERGER_PARAMETER */);\n  }\n\n  const resultArray = [];\n  for (let i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n  return resultArray.join('');\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet settingsServiceInstance;\nclass SettingsService {\n  constructor() {\n    // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n    this.instrumentationEnabled = true;\n    // The variable which controls logging of custom traces.\n    this.dataCollectionEnabled = true;\n    // Configuration flags set through remote config.\n    this.loggingEnabled = false;\n    // Sampling rate between 0 and 1.\n    this.tracesSamplingRate = 1;\n    this.networkRequestsSamplingRate = 1;\n    // Address of logging service.\n    this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n    // Performance event transport endpoint URL which should be compatible with proto3.\n    // New Address for transport service, not configurable via Remote Config.\n    this.flTransportEndpointUrl = mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');\n    this.transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n    // Source type for performance event logs.\n    this.logSource = 462;\n    // Flags which control per session logging of traces and network requests.\n    this.logTraceAfterSampling = false;\n    this.logNetworkAfterSampling = false;\n    // TTL of config retrieved from remote config in hours.\n    this.configTimeToLive = 12;\n  }\n  getFlTransportFullUrl() {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  }\n  static getInstance() {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar VisibilityState;\n(function (VisibilityState) {\n  VisibilityState[VisibilityState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  VisibilityState[VisibilityState[\"VISIBLE\"] = 1] = \"VISIBLE\";\n  VisibilityState[VisibilityState[\"HIDDEN\"] = 2] = \"HIDDEN\";\n})(VisibilityState || (VisibilityState = {}));\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\nfunction getServiceWorkerStatus() {\n  const navigator = Api.getInstance().navigator;\n  if (navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) {\n    if (navigator.serviceWorker.controller) {\n      return 2 /* ServiceWorkerStatus.CONTROLLED */;\n    } else {\n      return 3 /* ServiceWorkerStatus.UNCONTROLLED */;\n    }\n  } else {\n    return 1 /* ServiceWorkerStatus.UNSUPPORTED */;\n  }\n}\n\nfunction getVisibilityState() {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\nfunction getEffectiveConnectionType() {\n  const navigator = Api.getInstance().navigator;\n  const navigatorConnection = navigator.connection;\n  const effectiveType = navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return 1 /* EffectiveConnectionType.CONNECTION_SLOW_2G */;\n    case '2g':\n      return 2 /* EffectiveConnectionType.CONNECTION_2G */;\n    case '3g':\n      return 3 /* EffectiveConnectionType.CONNECTION_3G */;\n    case '4g':\n      return 4 /* EffectiveConnectionType.CONNECTION_4G */;\n    default:\n      return 0 /* EffectiveConnectionType.UNKNOWN */;\n  }\n}\n\nfunction isValidCustomAttributeName(name) {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix => name.startsWith(prefix));\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\nfunction isValidCustomAttributeValue(value) {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getAppId(firebaseApp) {\n  var _a;\n  const appId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no app id\" /* ErrorCode.NO_APP_ID */);\n  }\n\n  return appId;\n}\nfunction getProjectId(firebaseApp) {\n  var _a;\n  const projectId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.projectId;\n  if (!projectId) {\n    throw ERROR_FACTORY.create(\"no project id\" /* ErrorCode.NO_PROJECT_ID */);\n  }\n\n  return projectId;\n}\nfunction getApiKey(firebaseApp) {\n  var _a;\n  const apiKey = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.apiKey;\n  if (!apiKey) {\n    throw ERROR_FACTORY.create(\"no api key\" /* ErrorCode.NO_API_KEY */);\n  }\n\n  return apiKey;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nconst DEFAULT_CONFIGS = {\n  loggingEnabled: true\n};\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\nfunction getConfig(performanceController, iid) {\n  const config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n  return getRemoteConfig(performanceController, iid).then(processConfig).then(config => storeConfig(config), /** Do nothing for error, use defaults set in settings service. */\n  () => {});\n}\nfunction getStoredConfig() {\n  const localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    const configResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch (_a) {\n    return;\n  }\n}\nfunction storeConfig(config) {\n  const localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() + SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000));\n}\nconst COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';\nfunction getRemoteConfig(performanceController, iid) {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise(performanceController.installations).then(authToken => {\n    const projectId = getProjectId(performanceController.app);\n    const apiKey = getApiKey(performanceController.app);\n    const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${apiKey}`;\n    const request = new Request(configEndPoint, {\n      method: 'POST',\n      headers: {\n        Authorization: `${FIS_AUTH_PREFIX} ${authToken}`\n      },\n      /* eslint-disable camelcase */\n      body: JSON.stringify({\n        app_instance_id: iid,\n        app_instance_id_token: authToken,\n        app_id: getAppId(performanceController.app),\n        app_version: SDK_VERSION,\n        sdk_version: REMOTE_CONFIG_SDK_VERSION\n      })\n      /* eslint-enable camelcase */\n    });\n\n    return fetch(request).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      // In case response is not ok. This will be caught by catch.\n      throw ERROR_FACTORY.create(\"RC response not ok\" /* ErrorCode.RC_NOT_OK */);\n    });\n  }).catch(() => {\n    consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n    return undefined;\n  });\n}\n/**\r\n * Processes config coming either from calling RC or from local storage.\r\n * This method only runs if call is successful or config in storage\r\n * is valid.\r\n */\nfunction processConfig(config) {\n  if (!config) {\n    return config;\n  }\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled = String(entries.fpr_enabled) === 'true';\n  } else {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  }\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = DEFAULT_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance.tracesSamplingRate);\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance.networkRequestsSamplingRate);\n  return config;\n}\nfunction configValid(expiry) {\n  return Number(expiry) > Date.now();\n}\nfunction shouldLogAfterSampling(samplingRate) {\n  return Math.random() <= samplingRate;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet initializationStatus = 1 /* InitializationStatus.notInitialized */;\nlet initializationPromise;\nfunction getInitializationPromise(performanceController) {\n  initializationStatus = 2 /* InitializationStatus.initializationPending */;\n  initializationPromise = initializationPromise || initializePerf(performanceController);\n  return initializationPromise;\n}\nfunction isPerfInitialized() {\n  return initializationStatus === 3 /* InitializationStatus.initialized */;\n}\n\nfunction initializePerf(performanceController) {\n  return getDocumentReadyComplete().then(() => getIidPromise(performanceController.installations)).then(iid => getConfig(performanceController, iid)).then(() => changeInitializationStatus(), () => changeInitializationStatus());\n}\n/**\r\n * Returns a promise which resolves whenever the document readystate is complete or\r\n * immediately if it is called after page load complete.\r\n */\nfunction getDocumentReadyComplete() {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = () => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\nfunction changeInitializationStatus() {\n  initializationStatus = 3 /* InitializationStatus.initialized */;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nconst DEFAULT_REMAINING_TRIES = 3;\nconst MAX_EVENT_COUNT_PER_REQUEST = 1000;\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n/* eslint-enable camelcase */\nlet queue = [];\nlet isTransportSetup = false;\nfunction setupTransportService() {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\nfunction processQueue(timeOffset) {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n    dispatchQueueEvents();\n  }, timeOffset);\n}\nfunction dispatchQueueEvents() {\n  // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\n  // The staged events will be used for current logRequest attempt, remaining events will be kept\n  // for next attempt.\n  const staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  const log_event = staged.map(evt => ({\n    source_extension_json_proto3: evt.message,\n    event_time_ms: String(evt.eventTime)\n  }));\n  const data = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1,\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event\n  };\n  /* eslint-enable camelcase */\n  sendEventsToFl(data, staged).catch(() => {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [...staged, ...queue];\n    remainingTries--;\n    consoleLogger.info(`Tries left: ${remainingTries}.`);\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\nfunction sendEventsToFl(data, staged) {\n  return postToFlEndpoint(data).then(res => {\n    if (!res.ok) {\n      consoleLogger.info('Call to Firebase backend failed.');\n    }\n    return res.json();\n  }).then(res => {\n    // Find the next call wait time from the response.\n    const transportWait = Number(res.nextRequestWaitMillis);\n    let requestOffset = DEFAULT_SEND_INTERVAL_MS;\n    if (!isNaN(transportWait)) {\n      requestOffset = Math.max(transportWait, requestOffset);\n    }\n    // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n    // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n    const logResponseDetails = res.logResponseDetails;\n    if (Array.isArray(logResponseDetails) && logResponseDetails.length > 0 && logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER') {\n      queue = [...staged, ...queue];\n      consoleLogger.info(`Retry transport request later.`);\n    }\n    remainingTries = DEFAULT_REMAINING_TRIES;\n    // Schedule the next process.\n    processQueue(requestOffset);\n  });\n}\nfunction postToFlEndpoint(data) {\n  const flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\nfunction addToQueue(evt) {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(\"invalid cc log\" /* ErrorCode.INVALID_CC_LOG */);\n  }\n  // Add the new event to the queue.\n  queue = [...queue, evt];\n}\n/** Log handler for cc service to send the performance logs to the server. */\nfunction transportHandler(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nserializer) {\n  return (...args) => {\n    const message = serializer(...args);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/* eslint-enble camelcase */\nlet logger;\n// This method is not called before initialization.\nfunction sendLog(resource, resourceType) {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\nfunction logTrace(trace) {\n  const settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n    getInitializationPromise(trace.performanceController).then(() => sendTraceLog(trace), () => sendTraceLog(trace));\n  }\n}\nfunction sendTraceLog(trace) {\n  if (!getIid()) {\n    return;\n  }\n  const settingsService = SettingsService.getInstance();\n  if (!settingsService.loggingEnabled || !settingsService.logTraceAfterSampling) {\n    return;\n  }\n  setTimeout(() => sendLog(trace, 1 /* ResourceType.Trace */), 0);\n}\nfunction logNetworkRequest(networkRequest) {\n  const settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  const networkRequestUrl = networkRequest.url;\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (networkRequestUrl === logEndpointUrl || networkRequestUrl === flEndpointUrl) {\n    return;\n  }\n  if (!settingsService.loggingEnabled || !settingsService.logNetworkAfterSampling) {\n    return;\n  }\n  setTimeout(() => sendLog(networkRequest, 0 /* ResourceType.NetworkRequest */), 0);\n}\nfunction serializer(resource, resourceType) {\n  if (resourceType === 0 /* ResourceType.NetworkRequest */) {\n    return serializeNetworkRequest(resource);\n  }\n  return serializeTrace(resource);\n}\nfunction serializeNetworkRequest(networkRequest) {\n  const networkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric = {\n    application_info: getApplicationInfo(networkRequest.performanceController.app),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\nfunction serializeTrace(trace) {\n  const traceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  const customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n  const perfMetric = {\n    application_info: getApplicationInfo(trace.performanceController.app),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\nfunction getApplicationInfo(firebaseApp) {\n  return {\n    google_app_id: getAppId(firebaseApp),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst MAX_METRIC_NAME_LENGTH = 100;\nconst RESERVED_AUTO_PREFIX = '_';\nconst oobMetrics = [FIRST_PAINT_COUNTER_NAME, FIRST_CONTENTFUL_PAINT_COUNTER_NAME, FIRST_INPUT_DELAY_COUNTER_NAME];\n/**\r\n * Returns true if the metric is custom and does not start with reserved prefix, or if\r\n * the metric is one of out of the box page load trace metrics.\r\n */\nfunction isValidMetricName(name, traceName) {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return traceName && traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) && oobMetrics.indexOf(name) > -1 || !name.startsWith(RESERVED_AUTO_PREFIX);\n}\n/**\r\n * Converts the provided value to an integer value to be used in case of a metric.\r\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\r\n *\r\n * @returns Converted integer number to be set for the metric.\r\n */\nfunction convertMetricValueToInteger(providedValue) {\n  const valueAsInteger = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(`Metric value should be an Integer, setting the value as : ${valueAsInteger}.`);\n  }\n  return valueAsInteger;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Trace {\n  /**\r\n   * @param performanceController The performance controller running.\r\n   * @param name The name of the trace.\r\n   * @param isAuto If the trace is auto-instrumented.\r\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\r\n   * is only set when the trace is built for logging when the user directly uses the user timing\r\n   * api (performance.mark and performance.measure).\r\n   */\n  constructor(performanceController, name, isAuto = false, traceMeasureName) {\n    this.performanceController = performanceController;\n    this.name = name;\n    this.isAuto = isAuto;\n    this.state = 1 /* TraceState.UNINITIALIZED */;\n    this.customAttributes = {};\n    this.counters = {};\n    this.api = Api.getInstance();\n    this.randomId = Math.floor(Math.random() * 1000000);\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceMeasure = traceMeasureName || `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n  /**\r\n   * Starts a trace. The measurement of the duration starts at this point.\r\n   */\n  start() {\n    if (this.state !== 1 /* TraceState.UNINITIALIZED */) {\n      throw ERROR_FACTORY.create(\"trace started\" /* ErrorCode.TRACE_STARTED_BEFORE */, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = 2 /* TraceState.RUNNING */;\n  }\n  /**\r\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\r\n   * is logged.\r\n   */\n  stop() {\n    if (this.state !== 2 /* TraceState.RUNNING */) {\n      throw ERROR_FACTORY.create(\"trace stopped\" /* ErrorCode.TRACE_STOPPED_BEFORE */, {\n        traceName: this.name\n      });\n    }\n    this.state = 3 /* TraceState.TERMINATED */;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n  /**\r\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\r\n   * directly. No need to use start and stop methods.\r\n   * @param startTime Trace start time since epoch in millisec\r\n   * @param duration The duraction of the trace in millisec\r\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\r\n   */\n  record(startTime, duration, options) {\n    if (startTime <= 0) {\n      throw ERROR_FACTORY.create(\"nonpositive trace startTime\" /* ErrorCode.NONPOSITIVE_TRACE_START_TIME */, {\n        traceName: this.name\n      });\n    }\n    if (duration <= 0) {\n      throw ERROR_FACTORY.create(\"nonpositive trace duration\" /* ErrorCode.NONPOSITIVE_TRACE_DURATION */, {\n        traceName: this.name\n      });\n    }\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = Object.assign({}, options.attributes);\n    }\n    if (options && options.metrics) {\n      for (const metricName of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metricName]))) {\n          this.counters[metricName] = Math.floor(Number(options.metrics[metricName]));\n        }\n      }\n    }\n    logTrace(this);\n  }\n  /**\r\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\r\n   * custom metric if one with the given name does not exist. The value will be floored down to an\r\n   * integer.\r\n   * @param counter Name of the custom metric\r\n   * @param numAsInteger Increment by value\r\n   */\n  incrementMetric(counter, numAsInteger = 1) {\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  }\n  /**\r\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\r\n   * given name does not exist. The value will be floored down to an integer.\r\n   * @param counter Name of the custom metric\r\n   * @param numAsInteger Set custom metric to this value\r\n   */\n  putMetric(counter, numAsInteger) {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger !== null && numAsInteger !== void 0 ? numAsInteger : 0);\n    } else {\n      throw ERROR_FACTORY.create(\"invalid custom metric name\" /* ErrorCode.INVALID_CUSTOM_METRIC_NAME */, {\n        customMetricName: counter\n      });\n    }\n  }\n  /**\r\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\r\n   * not exist will return zero.\r\n   * @param counter\r\n   */\n  getMetric(counter) {\n    return this.counters[counter] || 0;\n  }\n  /**\r\n   * Sets a custom attribute of a trace to a certain value.\r\n   * @param attr\r\n   * @param value\r\n   */\n  putAttribute(attr, value) {\n    const isValidName = isValidCustomAttributeName(attr);\n    const isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(\"invalid attribute name\" /* ErrorCode.INVALID_ATTRIBUTE_NAME */, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(\"invalid attribute value\" /* ErrorCode.INVALID_ATTRIBUTE_VALUE */, {\n        attributeValue: value\n      });\n    }\n  }\n  /**\r\n   * Retrieves the value a custom attribute of a trace is set to.\r\n   * @param attr\r\n   */\n  getAttribute(attr) {\n    return this.customAttributes[attr];\n  }\n  removeAttribute(attr) {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  }\n  getAttributes() {\n    return Object.assign({}, this.customAttributes);\n  }\n  setStartTime(startTime) {\n    this.startTimeUs = startTime;\n  }\n  setDuration(duration) {\n    this.durationUs = duration;\n  }\n  /**\r\n   * Calculates and assigns the duration and start time of the trace using the measure performance\r\n   * entry.\r\n   */\n  calculateTraceMetrics() {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);\n    }\n  }\n  /**\r\n   * @param navigationTimings A single element array which contains the navigationTIming object of\r\n   * the page load\r\n   * @param paintTimings A array which contains paintTiming object of the page load\r\n   * @param firstInputDelay First input delay in millisec\r\n   */\n  static createOobTrace(performanceController, navigationTimings, paintTimings, firstInputDelay) {\n    const route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    const trace = new Trace(performanceController, OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));\n      trace.putMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));\n      trace.putMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));\n    }\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(paintObject => paintObject.name === FIRST_PAINT);\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));\n      }\n      const firstContentfulPaint = paintTimings.find(paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT);\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));\n      }\n      if (firstInputDelay) {\n        trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));\n      }\n    }\n    logTrace(trace);\n  }\n  static createUserTimingTrace(performanceController, measureName) {\n    const trace = new Trace(performanceController, measureName, false, measureName);\n    logTrace(trace);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction createNetworkRequestEntry(performanceController, entry) {\n  const performanceEntry = entry;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);\n  const timeToResponseInitiatedUs = performanceEntry.responseStart ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000) : undefined;\n  const timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000);\n  // Remove the query params from logged network request url.\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest = {\n    performanceController,\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n  logNetworkRequest(networkRequest);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst FID_WAIT_TIME_MS = 5000;\nfunction setupOobResources(performanceController) {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(() => setupOobTraces(performanceController), 0);\n  setTimeout(() => setupNetworkRequests(performanceController), 0);\n  setTimeout(() => setupUserTimingTraces(performanceController), 0);\n}\nfunction setupNetworkRequests(performanceController) {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n  for (const resource of resources) {\n    createNetworkRequestEntry(performanceController, resource);\n  }\n  api.setupObserver('resource', entry => createNetworkRequestEntry(performanceController, entry));\n}\nfunction setupOobTraces(performanceController) {\n  const api = Api.getInstance();\n  const navigationTimings = api.getEntriesByType('navigation');\n  const paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeoutId = setTimeout(() => {\n      Trace.createOobTrace(performanceController, navigationTimings, paintTimings);\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay(fid => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(performanceController, navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(performanceController, navigationTimings, paintTimings);\n  }\n}\nfunction setupUserTimingTraces(performanceController) {\n  const api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  const measures = api.getEntriesByType('measure');\n  for (const measure of measures) {\n    createUserTimingTrace(performanceController, measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', entry => createUserTimingTrace(performanceController, entry));\n}\nfunction createUserTimingTrace(performanceController, measure) {\n  const measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) === TRACE_MEASURE_PREFIX) {\n    return;\n  }\n  Trace.createUserTimingTrace(performanceController, measureName);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass PerformanceController {\n  constructor(app, installations) {\n    this.app = app;\n    this.installations = installations;\n    this.initialized = false;\n  }\n  /**\r\n   * This method *must* be called internally as part of creating a\r\n   * PerformanceController instance.\r\n   *\r\n   * Currently it's not possible to pass the settings object through the\r\n   * constructor using Components, so this method exists to be called with the\r\n   * desired settings, to ensure nothing is collected without the user's\r\n   * consent.\r\n   */\n  _init(settings) {\n    if (this.initialized) {\n      return;\n    }\n    if ((settings === null || settings === void 0 ? void 0 : settings.dataCollectionEnabled) !== undefined) {\n      this.dataCollectionEnabled = settings.dataCollectionEnabled;\n    }\n    if ((settings === null || settings === void 0 ? void 0 : settings.instrumentationEnabled) !== undefined) {\n      this.instrumentationEnabled = settings.instrumentationEnabled;\n    }\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable().then(isAvailable => {\n        if (isAvailable) {\n          setupTransportService();\n          getInitializationPromise(this).then(() => setupOobResources(this), () => setupOobResources(this));\n          this.initialized = true;\n        }\n      }).catch(error => {\n        consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\n      });\n    } else {\n      consoleLogger.info('Firebase Performance cannot start if the browser does not support ' + '\"Fetch\" and \"Promise\", or cookies are disabled.');\n    }\n  }\n  set instrumentationEnabled(val) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n  get instrumentationEnabled() {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n  set dataCollectionEnabled(val) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n  get dataCollectionEnabled() {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n}\n\n/**\r\n * Firebase Performance Monitoring\r\n *\r\n * @packageDocumentation\r\n */\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n/**\r\n * Returns a {@link FirebasePerformance} instance for the given app.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @public\r\n */\nfunction getPerformance(app = getApp()) {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'performance');\n  const perfInstance = provider.getImmediate();\n  return perfInstance;\n}\n/**\r\n * Returns a {@link FirebasePerformance} instance for the given app. Can only be called once.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @param settings - Optional settings for the {@link FirebasePerformance} instance.\r\n * @public\r\n */\nfunction initializePerformance(app, settings) {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'performance');\n  // throw if an instance was already created.\n  // It could happen if initializePerformance() is called more than once, or getPerformance() is called first.\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialSettings = provider.getOptions();\n    if (deepEqual(initialSettings, settings !== null && settings !== void 0 ? settings : {})) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already initialized\" /* ErrorCode.ALREADY_INITIALIZED */);\n    }\n  }\n\n  const perfInstance = provider.initialize({\n    options: settings\n  });\n  return perfInstance;\n}\n/**\r\n * Returns a new `PerformanceTrace` instance.\r\n * @param performance - The {@link FirebasePerformance} instance to use.\r\n * @param name - The name of the trace.\r\n * @public\r\n */\nfunction trace(performance, name) {\n  performance = getModularInstance(performance);\n  return new Trace(performance, name);\n}\nconst factory = (container, {\n  options: settings\n}) => {\n  // Dependencies\n  const app = container.getProvider('app').getImmediate();\n  const installations = container.getProvider('installations-internal').getImmediate();\n  if (app.name !== DEFAULT_ENTRY_NAME) {\n    throw ERROR_FACTORY.create(\"FB not default\" /* ErrorCode.FB_NOT_DEFAULT */);\n  }\n\n  if (typeof window === 'undefined') {\n    throw ERROR_FACTORY.create(\"no window\" /* ErrorCode.NO_WINDOW */);\n  }\n\n  setupApi(window);\n  const perfInstance = new PerformanceController(app, installations);\n  perfInstance._init(settings);\n  return perfInstance;\n};\nfunction registerPerformance() {\n  _registerComponent(new Component('performance', factory, \"PUBLIC\" /* ComponentType.PUBLIC */));\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n}\nregisterPerformance();\nexport { getPerformance, initializePerformance, trace };","map":{"version":3,"names":["ErrorFactory","areCookiesEnabled","isIndexedDBAvailable","validateIndexedDBOpenable","getModularInstance","deepEqual","Logger","LogLevel","_getProvider","getApp","_registerComponent","registerVersion","Component","name","version","SDK_VERSION","TRACE_START_MARK_PREFIX","TRACE_STOP_MARK_PREFIX","TRACE_MEASURE_PREFIX","OOB_TRACE_PAGE_LOAD_PREFIX","FIRST_PAINT_COUNTER_NAME","FIRST_CONTENTFUL_PAINT_COUNTER_NAME","FIRST_INPUT_DELAY_COUNTER_NAME","CONFIG_LOCAL_STORAGE_KEY","CONFIG_EXPIRY_LOCAL_STORAGE_KEY","SERVICE","SERVICE_NAME","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","consoleLogger","logLevel","INFO","apiInstance","windowInstance","Api","constructor","window","create","performance","PerformanceObserver","windowLocation","location","navigator","document","cookieEnabled","localStorage","perfMetrics","onFirstInputDelay","getUrl","href","split","mark","measure","measureName","mark1","mark2","getEntriesByType","type","getEntriesByName","getTimeOrigin","timeOrigin","timing","navigationStart","requiredApisAvailable","fetch","Promise","info","setupObserver","entryType","callback","observer","list","entry","getEntries","observe","entryTypes","getInstance","undefined","setupApi","iid","getIidPromise","installationsService","iidPromise","getId","then","iidVal","getIid","getAuthTokenPromise","authTokenPromise","getToken","authTokenVal","mergeStrings","part1","part2","sizeDiff","length","resultArray","i","push","charAt","join","settingsServiceInstance","SettingsService","instrumentationEnabled","dataCollectionEnabled","loggingEnabled","tracesSamplingRate","networkRequestsSamplingRate","logEndPointUrl","flTransportEndpointUrl","transportKey","logSource","logTraceAfterSampling","logNetworkAfterSampling","configTimeToLive","getFlTransportFullUrl","concat","VisibilityState","RESERVED_ATTRIBUTE_PREFIXES","ATTRIBUTE_FORMAT_REGEX","RegExp","MAX_ATTRIBUTE_NAME_LENGTH","MAX_ATTRIBUTE_VALUE_LENGTH","getServiceWorkerStatus","serviceWorker","controller","getVisibilityState","visibilityState","VISIBLE","HIDDEN","UNKNOWN","getEffectiveConnectionType","navigatorConnection","connection","effectiveType","isValidCustomAttributeName","matchesReservedPrefix","some","prefix","startsWith","match","isValidCustomAttributeValue","value","getAppId","firebaseApp","_a","appId","options","getProjectId","projectId","getApiKey","apiKey","REMOTE_CONFIG_SDK_VERSION","DEFAULT_CONFIGS","FIS_AUTH_PREFIX","getConfig","performanceController","config","getStoredConfig","processConfig","resolve","getRemoteConfig","storeConfig","expiryString","getItem","configValid","configStringified","configResponse","JSON","parse","setItem","stringify","String","Date","now","COULD_NOT_GET_CONFIG_MSG","installations","authToken","app","configEndPoint","request","Request","method","headers","Authorization","body","app_instance_id","app_instance_id_token","app_id","app_version","sdk_version","response","ok","json","catch","entries","fpr_enabled","fpr_log_source","Number","fpr_log_endpoint_url","fpr_log_transport_key","fpr_vc_network_request_sampling_rate","fpr_vc_trace_sampling_rate","shouldLogAfterSampling","expiry","samplingRate","Math","random","initializationStatus","initializationPromise","getInitializationPromise","initializePerf","isPerfInitialized","getDocumentReadyComplete","changeInitializationStatus","readyState","handler","removeEventListener","addEventListener","DEFAULT_SEND_INTERVAL_MS","INITIAL_SEND_TIME_DELAY_MS","DEFAULT_REMAINING_TRIES","MAX_EVENT_COUNT_PER_REQUEST","remainingTries","queue","isTransportSetup","setupTransportService","processQueue","timeOffset","setTimeout","dispatchQueueEvents","staged","splice","log_event","map","evt","source_extension_json_proto3","message","event_time_ms","eventTime","data","request_time_ms","client_info","client_type","js_client_info","log_source","sendEventsToFl","postToFlEndpoint","res","transportWait","nextRequestWaitMillis","requestOffset","isNaN","max","logResponseDetails","Array","isArray","responseAction","flTransportFullUrl","addToQueue","transportHandler","serializer","args","logger","sendLog","resource","resourceType","logTrace","trace","settingsService","isAuto","sendTraceLog","logNetworkRequest","networkRequest","networkRequestUrl","url","logEndpointUrl","flEndpointUrl","serializeNetworkRequest","serializeTrace","networkRequestMetric","http_method","httpMethod","http_response_code","response_payload_bytes","responsePayloadBytes","client_start_time_us","startTimeUs","time_to_response_initiated_us","timeToResponseInitiatedUs","time_to_response_completed_us","timeToResponseCompletedUs","perfMetric","application_info","getApplicationInfo","network_request_metric","traceMetric","is_auto","duration_us","durationUs","Object","keys","counters","customAttributes","getAttributes","custom_attributes","trace_metric","google_app_id","web_app_info","page_url","service_worker_status","visibility_state","effective_connection_type","application_process_state","MAX_METRIC_NAME_LENGTH","RESERVED_AUTO_PREFIX","oobMetrics","isValidMetricName","traceName","indexOf","convertMetricValueToInteger","providedValue","valueAsInteger","floor","Trace","traceMeasureName","state","api","randomId","traceStartMark","traceStopMark","traceMeasure","calculateTraceMetrics","start","stop","record","startTime","duration","attributes","assign","metrics","metricName","incrementMetric","counter","numAsInteger","putMetric","customMetricName","getMetric","putAttribute","attr","isValidName","isValidValue","attributeName","attributeValue","getAttribute","removeAttribute","setStartTime","setDuration","perfMeasureEntries","perfMeasureEntry","createOobTrace","navigationTimings","paintTimings","firstInputDelay","route","timeOriginUs","domInteractive","domContentLoadedEventEnd","loadEventEnd","FIRST_PAINT","FIRST_CONTENTFUL_PAINT","firstPaint","find","paintObject","firstContentfulPaint","createUserTimingTrace","createNetworkRequestEntry","performanceEntry","responseStart","responseEnd","transferSize","FID_WAIT_TIME_MS","setupOobResources","setupOobTraces","setupNetworkRequests","setupUserTimingTraces","resources","timeoutId","fid","clearTimeout","measures","substring","PerformanceController","initialized","_init","settings","isAvailable","error","val","DEFAULT_ENTRY_NAME","getPerformance","provider","perfInstance","getImmediate","initializePerformance","isInitialized","existingInstance","initialSettings","getOptions","initialize","factory","container","getProvider","registerPerformance"],"sources":["C:/Users/55219/Desktop/Studio-Val-em-conclusao/node_modules/@firebase/performance/dist/esm/index.esm2017.js"],"sourcesContent":["import { ErrorFactory, areCookiesEnabled, isIndexedDBAvailable, validateIndexedDBOpenable, getModularInstance, deepEqual } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport '@firebase/installations';\n\nconst name = \"@firebase/performance\";\nconst version = \"0.6.4\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SDK_VERSION = version;\r\n/** The prefix for start User Timing marks used for creating Traces. */\r\nconst TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\r\n/** The prefix for stop User Timing marks used for creating Traces. */\r\nconst TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\r\n/** The prefix for User Timing measure used for creating Traces. */\r\nconst TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\r\n/** The prefix for out of the box page load Trace name. */\r\nconst OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\r\nconst FIRST_PAINT_COUNTER_NAME = '_fp';\r\nconst FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\r\nconst FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\r\nconst CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\r\nconst CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';\r\nconst SERVICE = 'performance';\r\nconst SERVICE_NAME = 'Performance';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERROR_DESCRIPTION_MAP = {\r\n    [\"trace started\" /* ErrorCode.TRACE_STARTED_BEFORE */]: 'Trace {$traceName} was started before.',\r\n    [\"trace stopped\" /* ErrorCode.TRACE_STOPPED_BEFORE */]: 'Trace {$traceName} is not running.',\r\n    [\"nonpositive trace startTime\" /* ErrorCode.NONPOSITIVE_TRACE_START_TIME */]: 'Trace {$traceName} startTime should be positive.',\r\n    [\"nonpositive trace duration\" /* ErrorCode.NONPOSITIVE_TRACE_DURATION */]: 'Trace {$traceName} duration should be positive.',\r\n    [\"no window\" /* ErrorCode.NO_WINDOW */]: 'Window is not available.',\r\n    [\"no app id\" /* ErrorCode.NO_APP_ID */]: 'App id is not available.',\r\n    [\"no project id\" /* ErrorCode.NO_PROJECT_ID */]: 'Project id is not available.',\r\n    [\"no api key\" /* ErrorCode.NO_API_KEY */]: 'Api key is not available.',\r\n    [\"invalid cc log\" /* ErrorCode.INVALID_CC_LOG */]: 'Attempted to queue invalid cc event',\r\n    [\"FB not default\" /* ErrorCode.FB_NOT_DEFAULT */]: 'Performance can only start when Firebase app instance is the default one.',\r\n    [\"RC response not ok\" /* ErrorCode.RC_NOT_OK */]: 'RC response is not ok',\r\n    [\"invalid attribute name\" /* ErrorCode.INVALID_ATTRIBUTE_NAME */]: 'Attribute name {$attributeName} is invalid.',\r\n    [\"invalid attribute value\" /* ErrorCode.INVALID_ATTRIBUTE_VALUE */]: 'Attribute value {$attributeValue} is invalid.',\r\n    [\"invalid custom metric name\" /* ErrorCode.INVALID_CUSTOM_METRIC_NAME */]: 'Custom metric name {$customMetricName} is invalid',\r\n    [\"invalid String merger input\" /* ErrorCode.INVALID_STRING_MERGER_PARAMETER */]: 'Input for String merger is invalid, contact support team to resolve.',\r\n    [\"already initialized\" /* ErrorCode.ALREADY_INITIALIZED */]: 'initializePerformance() has already been called with ' +\r\n        'different options. To avoid this error, call initializePerformance() with the ' +\r\n        'same options as when it was originally called, or call getPerformance() to return the' +\r\n        ' already initialized instance.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst consoleLogger = new Logger(SERVICE_NAME);\r\nconsoleLogger.logLevel = LogLevel.INFO;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet apiInstance;\r\nlet windowInstance;\r\n/**\r\n * This class holds a reference to various browser related objects injected by\r\n * set methods.\r\n */\r\nclass Api {\r\n    constructor(window) {\r\n        this.window = window;\r\n        if (!window) {\r\n            throw ERROR_FACTORY.create(\"no window\" /* ErrorCode.NO_WINDOW */);\r\n        }\r\n        this.performance = window.performance;\r\n        this.PerformanceObserver = window.PerformanceObserver;\r\n        this.windowLocation = window.location;\r\n        this.navigator = window.navigator;\r\n        this.document = window.document;\r\n        if (this.navigator && this.navigator.cookieEnabled) {\r\n            // If user blocks cookies on the browser, accessing localStorage will\r\n            // throw an exception.\r\n            this.localStorage = window.localStorage;\r\n        }\r\n        if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\r\n            this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\r\n        }\r\n    }\r\n    getUrl() {\r\n        // Do not capture the string query part of url.\r\n        return this.windowLocation.href.split('?')[0];\r\n    }\r\n    mark(name) {\r\n        if (!this.performance || !this.performance.mark) {\r\n            return;\r\n        }\r\n        this.performance.mark(name);\r\n    }\r\n    measure(measureName, mark1, mark2) {\r\n        if (!this.performance || !this.performance.measure) {\r\n            return;\r\n        }\r\n        this.performance.measure(measureName, mark1, mark2);\r\n    }\r\n    getEntriesByType(type) {\r\n        if (!this.performance || !this.performance.getEntriesByType) {\r\n            return [];\r\n        }\r\n        return this.performance.getEntriesByType(type);\r\n    }\r\n    getEntriesByName(name) {\r\n        if (!this.performance || !this.performance.getEntriesByName) {\r\n            return [];\r\n        }\r\n        return this.performance.getEntriesByName(name);\r\n    }\r\n    getTimeOrigin() {\r\n        // Polyfill the time origin with performance.timing.navigationStart.\r\n        return (this.performance &&\r\n            (this.performance.timeOrigin || this.performance.timing.navigationStart));\r\n    }\r\n    requiredApisAvailable() {\r\n        if (!fetch || !Promise || !areCookiesEnabled()) {\r\n            consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.');\r\n            return false;\r\n        }\r\n        if (!isIndexedDBAvailable()) {\r\n            consoleLogger.info('IndexedDB is not supported by current browswer');\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    setupObserver(entryType, callback) {\r\n        if (!this.PerformanceObserver) {\r\n            return;\r\n        }\r\n        const observer = new this.PerformanceObserver(list => {\r\n            for (const entry of list.getEntries()) {\r\n                // `entry` is a PerformanceEntry instance.\r\n                callback(entry);\r\n            }\r\n        });\r\n        // Start observing the entry types you care about.\r\n        observer.observe({ entryTypes: [entryType] });\r\n    }\r\n    static getInstance() {\r\n        if (apiInstance === undefined) {\r\n            apiInstance = new Api(windowInstance);\r\n        }\r\n        return apiInstance;\r\n    }\r\n}\r\nfunction setupApi(window) {\r\n    windowInstance = window;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet iid;\r\nfunction getIidPromise(installationsService) {\r\n    const iidPromise = installationsService.getId();\r\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n    iidPromise.then((iidVal) => {\r\n        iid = iidVal;\r\n    });\r\n    return iidPromise;\r\n}\r\n// This method should be used after the iid is retrieved by getIidPromise method.\r\nfunction getIid() {\r\n    return iid;\r\n}\r\nfunction getAuthTokenPromise(installationsService) {\r\n    const authTokenPromise = installationsService.getToken();\r\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n    authTokenPromise.then((authTokenVal) => {\r\n    });\r\n    return authTokenPromise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction mergeStrings(part1, part2) {\r\n    const sizeDiff = part1.length - part2.length;\r\n    if (sizeDiff < 0 || sizeDiff > 1) {\r\n        throw ERROR_FACTORY.create(\"invalid String merger input\" /* ErrorCode.INVALID_STRING_MERGER_PARAMETER */);\r\n    }\r\n    const resultArray = [];\r\n    for (let i = 0; i < part1.length; i++) {\r\n        resultArray.push(part1.charAt(i));\r\n        if (part2.length > i) {\r\n            resultArray.push(part2.charAt(i));\r\n        }\r\n    }\r\n    return resultArray.join('');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet settingsServiceInstance;\r\nclass SettingsService {\r\n    constructor() {\r\n        // The variable which controls logging of automatic traces and HTTP/S network monitoring.\r\n        this.instrumentationEnabled = true;\r\n        // The variable which controls logging of custom traces.\r\n        this.dataCollectionEnabled = true;\r\n        // Configuration flags set through remote config.\r\n        this.loggingEnabled = false;\r\n        // Sampling rate between 0 and 1.\r\n        this.tracesSamplingRate = 1;\r\n        this.networkRequestsSamplingRate = 1;\r\n        // Address of logging service.\r\n        this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\r\n        // Performance event transport endpoint URL which should be compatible with proto3.\r\n        // New Address for transport service, not configurable via Remote Config.\r\n        this.flTransportEndpointUrl = mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');\r\n        this.transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\r\n        // Source type for performance event logs.\r\n        this.logSource = 462;\r\n        // Flags which control per session logging of traces and network requests.\r\n        this.logTraceAfterSampling = false;\r\n        this.logNetworkAfterSampling = false;\r\n        // TTL of config retrieved from remote config in hours.\r\n        this.configTimeToLive = 12;\r\n    }\r\n    getFlTransportFullUrl() {\r\n        return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\r\n    }\r\n    static getInstance() {\r\n        if (settingsServiceInstance === undefined) {\r\n            settingsServiceInstance = new SettingsService();\r\n        }\r\n        return settingsServiceInstance;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar VisibilityState;\r\n(function (VisibilityState) {\r\n    VisibilityState[VisibilityState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\r\n    VisibilityState[VisibilityState[\"VISIBLE\"] = 1] = \"VISIBLE\";\r\n    VisibilityState[VisibilityState[\"HIDDEN\"] = 2] = \"HIDDEN\";\r\n})(VisibilityState || (VisibilityState = {}));\r\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\r\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\r\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\r\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\r\nfunction getServiceWorkerStatus() {\r\n    const navigator = Api.getInstance().navigator;\r\n    if (navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) {\r\n        if (navigator.serviceWorker.controller) {\r\n            return 2 /* ServiceWorkerStatus.CONTROLLED */;\r\n        }\r\n        else {\r\n            return 3 /* ServiceWorkerStatus.UNCONTROLLED */;\r\n        }\r\n    }\r\n    else {\r\n        return 1 /* ServiceWorkerStatus.UNSUPPORTED */;\r\n    }\r\n}\r\nfunction getVisibilityState() {\r\n    const document = Api.getInstance().document;\r\n    const visibilityState = document.visibilityState;\r\n    switch (visibilityState) {\r\n        case 'visible':\r\n            return VisibilityState.VISIBLE;\r\n        case 'hidden':\r\n            return VisibilityState.HIDDEN;\r\n        default:\r\n            return VisibilityState.UNKNOWN;\r\n    }\r\n}\r\nfunction getEffectiveConnectionType() {\r\n    const navigator = Api.getInstance().navigator;\r\n    const navigatorConnection = navigator.connection;\r\n    const effectiveType = navigatorConnection && navigatorConnection.effectiveType;\r\n    switch (effectiveType) {\r\n        case 'slow-2g':\r\n            return 1 /* EffectiveConnectionType.CONNECTION_SLOW_2G */;\r\n        case '2g':\r\n            return 2 /* EffectiveConnectionType.CONNECTION_2G */;\r\n        case '3g':\r\n            return 3 /* EffectiveConnectionType.CONNECTION_3G */;\r\n        case '4g':\r\n            return 4 /* EffectiveConnectionType.CONNECTION_4G */;\r\n        default:\r\n            return 0 /* EffectiveConnectionType.UNKNOWN */;\r\n    }\r\n}\r\nfunction isValidCustomAttributeName(name) {\r\n    if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\r\n        return false;\r\n    }\r\n    const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix => name.startsWith(prefix));\r\n    return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\r\n}\r\nfunction isValidCustomAttributeValue(value) {\r\n    return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getAppId(firebaseApp) {\r\n    var _a;\r\n    const appId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.appId;\r\n    if (!appId) {\r\n        throw ERROR_FACTORY.create(\"no app id\" /* ErrorCode.NO_APP_ID */);\r\n    }\r\n    return appId;\r\n}\r\nfunction getProjectId(firebaseApp) {\r\n    var _a;\r\n    const projectId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.projectId;\r\n    if (!projectId) {\r\n        throw ERROR_FACTORY.create(\"no project id\" /* ErrorCode.NO_PROJECT_ID */);\r\n    }\r\n    return projectId;\r\n}\r\nfunction getApiKey(firebaseApp) {\r\n    var _a;\r\n    const apiKey = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.apiKey;\r\n    if (!apiKey) {\r\n        throw ERROR_FACTORY.create(\"no api key\" /* ErrorCode.NO_API_KEY */);\r\n    }\r\n    return apiKey;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\r\n// These values will be used if the remote config object is successfully\r\n// retrieved, but the template does not have these fields.\r\nconst DEFAULT_CONFIGS = {\r\n    loggingEnabled: true\r\n};\r\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\r\nfunction getConfig(performanceController, iid) {\r\n    const config = getStoredConfig();\r\n    if (config) {\r\n        processConfig(config);\r\n        return Promise.resolve();\r\n    }\r\n    return getRemoteConfig(performanceController, iid)\r\n        .then(processConfig)\r\n        .then(config => storeConfig(config), \r\n    /** Do nothing for error, use defaults set in settings service. */\r\n    () => { });\r\n}\r\nfunction getStoredConfig() {\r\n    const localStorage = Api.getInstance().localStorage;\r\n    if (!localStorage) {\r\n        return;\r\n    }\r\n    const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\r\n    if (!expiryString || !configValid(expiryString)) {\r\n        return;\r\n    }\r\n    const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\r\n    if (!configStringified) {\r\n        return;\r\n    }\r\n    try {\r\n        const configResponse = JSON.parse(configStringified);\r\n        return configResponse;\r\n    }\r\n    catch (_a) {\r\n        return;\r\n    }\r\n}\r\nfunction storeConfig(config) {\r\n    const localStorage = Api.getInstance().localStorage;\r\n    if (!config || !localStorage) {\r\n        return;\r\n    }\r\n    localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\r\n    localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() +\r\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000));\r\n}\r\nconst COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';\r\nfunction getRemoteConfig(performanceController, iid) {\r\n    // Perf needs auth token only to retrieve remote config.\r\n    return getAuthTokenPromise(performanceController.installations)\r\n        .then(authToken => {\r\n        const projectId = getProjectId(performanceController.app);\r\n        const apiKey = getApiKey(performanceController.app);\r\n        const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${apiKey}`;\r\n        const request = new Request(configEndPoint, {\r\n            method: 'POST',\r\n            headers: { Authorization: `${FIS_AUTH_PREFIX} ${authToken}` },\r\n            /* eslint-disable camelcase */\r\n            body: JSON.stringify({\r\n                app_instance_id: iid,\r\n                app_instance_id_token: authToken,\r\n                app_id: getAppId(performanceController.app),\r\n                app_version: SDK_VERSION,\r\n                sdk_version: REMOTE_CONFIG_SDK_VERSION\r\n            })\r\n            /* eslint-enable camelcase */\r\n        });\r\n        return fetch(request).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n            // In case response is not ok. This will be caught by catch.\r\n            throw ERROR_FACTORY.create(\"RC response not ok\" /* ErrorCode.RC_NOT_OK */);\r\n        });\r\n    })\r\n        .catch(() => {\r\n        consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\r\n        return undefined;\r\n    });\r\n}\r\n/**\r\n * Processes config coming either from calling RC or from local storage.\r\n * This method only runs if call is successful or config in storage\r\n * is valid.\r\n */\r\nfunction processConfig(config) {\r\n    if (!config) {\r\n        return config;\r\n    }\r\n    const settingsServiceInstance = SettingsService.getInstance();\r\n    const entries = config.entries || {};\r\n    if (entries.fpr_enabled !== undefined) {\r\n        // TODO: Change the assignment of loggingEnabled once the received type is\r\n        // known.\r\n        settingsServiceInstance.loggingEnabled =\r\n            String(entries.fpr_enabled) === 'true';\r\n    }\r\n    else {\r\n        // Config retrieved successfully, but there is no fpr_enabled in template.\r\n        // Use secondary configs value.\r\n        settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\r\n    }\r\n    if (entries.fpr_log_source) {\r\n        settingsServiceInstance.logSource = Number(entries.fpr_log_source);\r\n    }\r\n    else if (DEFAULT_CONFIGS.logSource) {\r\n        settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\r\n    }\r\n    if (entries.fpr_log_endpoint_url) {\r\n        settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\r\n    }\r\n    else if (DEFAULT_CONFIGS.logEndPointUrl) {\r\n        settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\r\n    }\r\n    // Key from Remote Config has to be non-empty string, otherwsie use local value.\r\n    if (entries.fpr_log_transport_key) {\r\n        settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\r\n    }\r\n    else if (DEFAULT_CONFIGS.transportKey) {\r\n        settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\r\n    }\r\n    if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\r\n        settingsServiceInstance.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);\r\n    }\r\n    else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\r\n        settingsServiceInstance.networkRequestsSamplingRate =\r\n            DEFAULT_CONFIGS.networkRequestsSamplingRate;\r\n    }\r\n    if (entries.fpr_vc_trace_sampling_rate !== undefined) {\r\n        settingsServiceInstance.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);\r\n    }\r\n    else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\r\n        settingsServiceInstance.tracesSamplingRate =\r\n            DEFAULT_CONFIGS.tracesSamplingRate;\r\n    }\r\n    // Set the per session trace and network logging flags.\r\n    settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance.tracesSamplingRate);\r\n    settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance.networkRequestsSamplingRate);\r\n    return config;\r\n}\r\nfunction configValid(expiry) {\r\n    return Number(expiry) > Date.now();\r\n}\r\nfunction shouldLogAfterSampling(samplingRate) {\r\n    return Math.random() <= samplingRate;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet initializationStatus = 1 /* InitializationStatus.notInitialized */;\r\nlet initializationPromise;\r\nfunction getInitializationPromise(performanceController) {\r\n    initializationStatus = 2 /* InitializationStatus.initializationPending */;\r\n    initializationPromise =\r\n        initializationPromise || initializePerf(performanceController);\r\n    return initializationPromise;\r\n}\r\nfunction isPerfInitialized() {\r\n    return initializationStatus === 3 /* InitializationStatus.initialized */;\r\n}\r\nfunction initializePerf(performanceController) {\r\n    return getDocumentReadyComplete()\r\n        .then(() => getIidPromise(performanceController.installations))\r\n        .then(iid => getConfig(performanceController, iid))\r\n        .then(() => changeInitializationStatus(), () => changeInitializationStatus());\r\n}\r\n/**\r\n * Returns a promise which resolves whenever the document readystate is complete or\r\n * immediately if it is called after page load complete.\r\n */\r\nfunction getDocumentReadyComplete() {\r\n    const document = Api.getInstance().document;\r\n    return new Promise(resolve => {\r\n        if (document && document.readyState !== 'complete') {\r\n            const handler = () => {\r\n                if (document.readyState === 'complete') {\r\n                    document.removeEventListener('readystatechange', handler);\r\n                    resolve();\r\n                }\r\n            };\r\n            document.addEventListener('readystatechange', handler);\r\n        }\r\n        else {\r\n            resolve();\r\n        }\r\n    });\r\n}\r\nfunction changeInitializationStatus() {\r\n    initializationStatus = 3 /* InitializationStatus.initialized */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\r\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\r\n// If end point does not work, the call will be tried for these many times.\r\nconst DEFAULT_REMAINING_TRIES = 3;\r\nconst MAX_EVENT_COUNT_PER_REQUEST = 1000;\r\nlet remainingTries = DEFAULT_REMAINING_TRIES;\r\n/* eslint-enable camelcase */\r\nlet queue = [];\r\nlet isTransportSetup = false;\r\nfunction setupTransportService() {\r\n    if (!isTransportSetup) {\r\n        processQueue(INITIAL_SEND_TIME_DELAY_MS);\r\n        isTransportSetup = true;\r\n    }\r\n}\r\nfunction processQueue(timeOffset) {\r\n    setTimeout(() => {\r\n        // If there is no remainingTries left, stop retrying.\r\n        if (remainingTries === 0) {\r\n            return;\r\n        }\r\n        // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\r\n        if (!queue.length) {\r\n            return processQueue(DEFAULT_SEND_INTERVAL_MS);\r\n        }\r\n        dispatchQueueEvents();\r\n    }, timeOffset);\r\n}\r\nfunction dispatchQueueEvents() {\r\n    // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\r\n    // The staged events will be used for current logRequest attempt, remaining events will be kept\r\n    // for next attempt.\r\n    const staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\r\n    /* eslint-disable camelcase */\r\n    // We will pass the JSON serialized event to the backend.\r\n    const log_event = staged.map(evt => ({\r\n        source_extension_json_proto3: evt.message,\r\n        event_time_ms: String(evt.eventTime)\r\n    }));\r\n    const data = {\r\n        request_time_ms: String(Date.now()),\r\n        client_info: {\r\n            client_type: 1,\r\n            js_client_info: {}\r\n        },\r\n        log_source: SettingsService.getInstance().logSource,\r\n        log_event\r\n    };\r\n    /* eslint-enable camelcase */\r\n    sendEventsToFl(data, staged).catch(() => {\r\n        // If the request fails for some reason, add the events that were attempted\r\n        // back to the primary queue to retry later.\r\n        queue = [...staged, ...queue];\r\n        remainingTries--;\r\n        consoleLogger.info(`Tries left: ${remainingTries}.`);\r\n        processQueue(DEFAULT_SEND_INTERVAL_MS);\r\n    });\r\n}\r\nfunction sendEventsToFl(data, staged) {\r\n    return postToFlEndpoint(data)\r\n        .then(res => {\r\n        if (!res.ok) {\r\n            consoleLogger.info('Call to Firebase backend failed.');\r\n        }\r\n        return res.json();\r\n    })\r\n        .then(res => {\r\n        // Find the next call wait time from the response.\r\n        const transportWait = Number(res.nextRequestWaitMillis);\r\n        let requestOffset = DEFAULT_SEND_INTERVAL_MS;\r\n        if (!isNaN(transportWait)) {\r\n            requestOffset = Math.max(transportWait, requestOffset);\r\n        }\r\n        // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\r\n        // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\r\n        const logResponseDetails = res.logResponseDetails;\r\n        if (Array.isArray(logResponseDetails) &&\r\n            logResponseDetails.length > 0 &&\r\n            logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER') {\r\n            queue = [...staged, ...queue];\r\n            consoleLogger.info(`Retry transport request later.`);\r\n        }\r\n        remainingTries = DEFAULT_REMAINING_TRIES;\r\n        // Schedule the next process.\r\n        processQueue(requestOffset);\r\n    });\r\n}\r\nfunction postToFlEndpoint(data) {\r\n    const flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\r\n    return fetch(flTransportFullUrl, {\r\n        method: 'POST',\r\n        body: JSON.stringify(data)\r\n    });\r\n}\r\nfunction addToQueue(evt) {\r\n    if (!evt.eventTime || !evt.message) {\r\n        throw ERROR_FACTORY.create(\"invalid cc log\" /* ErrorCode.INVALID_CC_LOG */);\r\n    }\r\n    // Add the new event to the queue.\r\n    queue = [...queue, evt];\r\n}\r\n/** Log handler for cc service to send the performance logs to the server. */\r\nfunction transportHandler(\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nserializer) {\r\n    return (...args) => {\r\n        const message = serializer(...args);\r\n        addToQueue({\r\n            message,\r\n            eventTime: Date.now()\r\n        });\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/* eslint-enble camelcase */\r\nlet logger;\r\n// This method is not called before initialization.\r\nfunction sendLog(resource, resourceType) {\r\n    if (!logger) {\r\n        logger = transportHandler(serializer);\r\n    }\r\n    logger(resource, resourceType);\r\n}\r\nfunction logTrace(trace) {\r\n    const settingsService = SettingsService.getInstance();\r\n    // Do not log if trace is auto generated and instrumentation is disabled.\r\n    if (!settingsService.instrumentationEnabled && trace.isAuto) {\r\n        return;\r\n    }\r\n    // Do not log if trace is custom and data collection is disabled.\r\n    if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\r\n        return;\r\n    }\r\n    // Do not log if required apis are not available.\r\n    if (!Api.getInstance().requiredApisAvailable()) {\r\n        return;\r\n    }\r\n    // Only log the page load auto traces if page is visible.\r\n    if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\r\n        return;\r\n    }\r\n    if (isPerfInitialized()) {\r\n        sendTraceLog(trace);\r\n    }\r\n    else {\r\n        // Custom traces can be used before the initialization but logging\r\n        // should wait until after.\r\n        getInitializationPromise(trace.performanceController).then(() => sendTraceLog(trace), () => sendTraceLog(trace));\r\n    }\r\n}\r\nfunction sendTraceLog(trace) {\r\n    if (!getIid()) {\r\n        return;\r\n    }\r\n    const settingsService = SettingsService.getInstance();\r\n    if (!settingsService.loggingEnabled ||\r\n        !settingsService.logTraceAfterSampling) {\r\n        return;\r\n    }\r\n    setTimeout(() => sendLog(trace, 1 /* ResourceType.Trace */), 0);\r\n}\r\nfunction logNetworkRequest(networkRequest) {\r\n    const settingsService = SettingsService.getInstance();\r\n    // Do not log network requests if instrumentation is disabled.\r\n    if (!settingsService.instrumentationEnabled) {\r\n        return;\r\n    }\r\n    // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\r\n    // Need to blacklist both old and new endpoints to avoid migration gap.\r\n    const networkRequestUrl = networkRequest.url;\r\n    // Blacklist old log endpoint and new transport endpoint.\r\n    // Because Performance SDK doesn't instrument requests sent from SDK itself.\r\n    const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\r\n    const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\r\n    if (networkRequestUrl === logEndpointUrl ||\r\n        networkRequestUrl === flEndpointUrl) {\r\n        return;\r\n    }\r\n    if (!settingsService.loggingEnabled ||\r\n        !settingsService.logNetworkAfterSampling) {\r\n        return;\r\n    }\r\n    setTimeout(() => sendLog(networkRequest, 0 /* ResourceType.NetworkRequest */), 0);\r\n}\r\nfunction serializer(resource, resourceType) {\r\n    if (resourceType === 0 /* ResourceType.NetworkRequest */) {\r\n        return serializeNetworkRequest(resource);\r\n    }\r\n    return serializeTrace(resource);\r\n}\r\nfunction serializeNetworkRequest(networkRequest) {\r\n    const networkRequestMetric = {\r\n        url: networkRequest.url,\r\n        http_method: networkRequest.httpMethod || 0,\r\n        http_response_code: 200,\r\n        response_payload_bytes: networkRequest.responsePayloadBytes,\r\n        client_start_time_us: networkRequest.startTimeUs,\r\n        time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\r\n        time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\r\n    };\r\n    const perfMetric = {\r\n        application_info: getApplicationInfo(networkRequest.performanceController.app),\r\n        network_request_metric: networkRequestMetric\r\n    };\r\n    return JSON.stringify(perfMetric);\r\n}\r\nfunction serializeTrace(trace) {\r\n    const traceMetric = {\r\n        name: trace.name,\r\n        is_auto: trace.isAuto,\r\n        client_start_time_us: trace.startTimeUs,\r\n        duration_us: trace.durationUs\r\n    };\r\n    if (Object.keys(trace.counters).length !== 0) {\r\n        traceMetric.counters = trace.counters;\r\n    }\r\n    const customAttributes = trace.getAttributes();\r\n    if (Object.keys(customAttributes).length !== 0) {\r\n        traceMetric.custom_attributes = customAttributes;\r\n    }\r\n    const perfMetric = {\r\n        application_info: getApplicationInfo(trace.performanceController.app),\r\n        trace_metric: traceMetric\r\n    };\r\n    return JSON.stringify(perfMetric);\r\n}\r\nfunction getApplicationInfo(firebaseApp) {\r\n    return {\r\n        google_app_id: getAppId(firebaseApp),\r\n        app_instance_id: getIid(),\r\n        web_app_info: {\r\n            sdk_version: SDK_VERSION,\r\n            page_url: Api.getInstance().getUrl(),\r\n            service_worker_status: getServiceWorkerStatus(),\r\n            visibility_state: getVisibilityState(),\r\n            effective_connection_type: getEffectiveConnectionType()\r\n        },\r\n        application_process_state: 0\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_METRIC_NAME_LENGTH = 100;\r\nconst RESERVED_AUTO_PREFIX = '_';\r\nconst oobMetrics = [\r\n    FIRST_PAINT_COUNTER_NAME,\r\n    FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\r\n    FIRST_INPUT_DELAY_COUNTER_NAME\r\n];\r\n/**\r\n * Returns true if the metric is custom and does not start with reserved prefix, or if\r\n * the metric is one of out of the box page load trace metrics.\r\n */\r\nfunction isValidMetricName(name, traceName) {\r\n    if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\r\n        return false;\r\n    }\r\n    return ((traceName &&\r\n        traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\r\n        oobMetrics.indexOf(name) > -1) ||\r\n        !name.startsWith(RESERVED_AUTO_PREFIX));\r\n}\r\n/**\r\n * Converts the provided value to an integer value to be used in case of a metric.\r\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\r\n *\r\n * @returns Converted integer number to be set for the metric.\r\n */\r\nfunction convertMetricValueToInteger(providedValue) {\r\n    const valueAsInteger = Math.floor(providedValue);\r\n    if (valueAsInteger < providedValue) {\r\n        consoleLogger.info(`Metric value should be an Integer, setting the value as : ${valueAsInteger}.`);\r\n    }\r\n    return valueAsInteger;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Trace {\r\n    /**\r\n     * @param performanceController The performance controller running.\r\n     * @param name The name of the trace.\r\n     * @param isAuto If the trace is auto-instrumented.\r\n     * @param traceMeasureName The name of the measure marker in user timing specification. This field\r\n     * is only set when the trace is built for logging when the user directly uses the user timing\r\n     * api (performance.mark and performance.measure).\r\n     */\r\n    constructor(performanceController, name, isAuto = false, traceMeasureName) {\r\n        this.performanceController = performanceController;\r\n        this.name = name;\r\n        this.isAuto = isAuto;\r\n        this.state = 1 /* TraceState.UNINITIALIZED */;\r\n        this.customAttributes = {};\r\n        this.counters = {};\r\n        this.api = Api.getInstance();\r\n        this.randomId = Math.floor(Math.random() * 1000000);\r\n        if (!this.isAuto) {\r\n            this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\r\n            this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\r\n            this.traceMeasure =\r\n                traceMeasureName ||\r\n                    `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\r\n            if (traceMeasureName) {\r\n                // For the case of direct user timing traces, no start stop will happen. The measure object\r\n                // is already available.\r\n                this.calculateTraceMetrics();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Starts a trace. The measurement of the duration starts at this point.\r\n     */\r\n    start() {\r\n        if (this.state !== 1 /* TraceState.UNINITIALIZED */) {\r\n            throw ERROR_FACTORY.create(\"trace started\" /* ErrorCode.TRACE_STARTED_BEFORE */, {\r\n                traceName: this.name\r\n            });\r\n        }\r\n        this.api.mark(this.traceStartMark);\r\n        this.state = 2 /* TraceState.RUNNING */;\r\n    }\r\n    /**\r\n     * Stops the trace. The measurement of the duration of the trace stops at this point and trace\r\n     * is logged.\r\n     */\r\n    stop() {\r\n        if (this.state !== 2 /* TraceState.RUNNING */) {\r\n            throw ERROR_FACTORY.create(\"trace stopped\" /* ErrorCode.TRACE_STOPPED_BEFORE */, {\r\n                traceName: this.name\r\n            });\r\n        }\r\n        this.state = 3 /* TraceState.TERMINATED */;\r\n        this.api.mark(this.traceStopMark);\r\n        this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);\r\n        this.calculateTraceMetrics();\r\n        logTrace(this);\r\n    }\r\n    /**\r\n     * Records a trace with predetermined values. If this method is used a trace is created and logged\r\n     * directly. No need to use start and stop methods.\r\n     * @param startTime Trace start time since epoch in millisec\r\n     * @param duration The duraction of the trace in millisec\r\n     * @param options An object which can optionally hold maps of custom metrics and custom attributes\r\n     */\r\n    record(startTime, duration, options) {\r\n        if (startTime <= 0) {\r\n            throw ERROR_FACTORY.create(\"nonpositive trace startTime\" /* ErrorCode.NONPOSITIVE_TRACE_START_TIME */, {\r\n                traceName: this.name\r\n            });\r\n        }\r\n        if (duration <= 0) {\r\n            throw ERROR_FACTORY.create(\"nonpositive trace duration\" /* ErrorCode.NONPOSITIVE_TRACE_DURATION */, {\r\n                traceName: this.name\r\n            });\r\n        }\r\n        this.durationUs = Math.floor(duration * 1000);\r\n        this.startTimeUs = Math.floor(startTime * 1000);\r\n        if (options && options.attributes) {\r\n            this.customAttributes = Object.assign({}, options.attributes);\r\n        }\r\n        if (options && options.metrics) {\r\n            for (const metricName of Object.keys(options.metrics)) {\r\n                if (!isNaN(Number(options.metrics[metricName]))) {\r\n                    this.counters[metricName] = Math.floor(Number(options.metrics[metricName]));\r\n                }\r\n            }\r\n        }\r\n        logTrace(this);\r\n    }\r\n    /**\r\n     * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\r\n     * custom metric if one with the given name does not exist. The value will be floored down to an\r\n     * integer.\r\n     * @param counter Name of the custom metric\r\n     * @param numAsInteger Increment by value\r\n     */\r\n    incrementMetric(counter, numAsInteger = 1) {\r\n        if (this.counters[counter] === undefined) {\r\n            this.putMetric(counter, numAsInteger);\r\n        }\r\n        else {\r\n            this.putMetric(counter, this.counters[counter] + numAsInteger);\r\n        }\r\n    }\r\n    /**\r\n     * Sets a custom metric to a specified value. Will create a new custom metric if one with the\r\n     * given name does not exist. The value will be floored down to an integer.\r\n     * @param counter Name of the custom metric\r\n     * @param numAsInteger Set custom metric to this value\r\n     */\r\n    putMetric(counter, numAsInteger) {\r\n        if (isValidMetricName(counter, this.name)) {\r\n            this.counters[counter] = convertMetricValueToInteger(numAsInteger !== null && numAsInteger !== void 0 ? numAsInteger : 0);\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"invalid custom metric name\" /* ErrorCode.INVALID_CUSTOM_METRIC_NAME */, {\r\n                customMetricName: counter\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Returns the value of the custom metric by that name. If a custom metric with that name does\r\n     * not exist will return zero.\r\n     * @param counter\r\n     */\r\n    getMetric(counter) {\r\n        return this.counters[counter] || 0;\r\n    }\r\n    /**\r\n     * Sets a custom attribute of a trace to a certain value.\r\n     * @param attr\r\n     * @param value\r\n     */\r\n    putAttribute(attr, value) {\r\n        const isValidName = isValidCustomAttributeName(attr);\r\n        const isValidValue = isValidCustomAttributeValue(value);\r\n        if (isValidName && isValidValue) {\r\n            this.customAttributes[attr] = value;\r\n            return;\r\n        }\r\n        // Throw appropriate error when the attribute name or value is invalid.\r\n        if (!isValidName) {\r\n            throw ERROR_FACTORY.create(\"invalid attribute name\" /* ErrorCode.INVALID_ATTRIBUTE_NAME */, {\r\n                attributeName: attr\r\n            });\r\n        }\r\n        if (!isValidValue) {\r\n            throw ERROR_FACTORY.create(\"invalid attribute value\" /* ErrorCode.INVALID_ATTRIBUTE_VALUE */, {\r\n                attributeValue: value\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Retrieves the value a custom attribute of a trace is set to.\r\n     * @param attr\r\n     */\r\n    getAttribute(attr) {\r\n        return this.customAttributes[attr];\r\n    }\r\n    removeAttribute(attr) {\r\n        if (this.customAttributes[attr] === undefined) {\r\n            return;\r\n        }\r\n        delete this.customAttributes[attr];\r\n    }\r\n    getAttributes() {\r\n        return Object.assign({}, this.customAttributes);\r\n    }\r\n    setStartTime(startTime) {\r\n        this.startTimeUs = startTime;\r\n    }\r\n    setDuration(duration) {\r\n        this.durationUs = duration;\r\n    }\r\n    /**\r\n     * Calculates and assigns the duration and start time of the trace using the measure performance\r\n     * entry.\r\n     */\r\n    calculateTraceMetrics() {\r\n        const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\r\n        const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\r\n        if (perfMeasureEntry) {\r\n            this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\r\n            this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);\r\n        }\r\n    }\r\n    /**\r\n     * @param navigationTimings A single element array which contains the navigationTIming object of\r\n     * the page load\r\n     * @param paintTimings A array which contains paintTiming object of the page load\r\n     * @param firstInputDelay First input delay in millisec\r\n     */\r\n    static createOobTrace(performanceController, navigationTimings, paintTimings, firstInputDelay) {\r\n        const route = Api.getInstance().getUrl();\r\n        if (!route) {\r\n            return;\r\n        }\r\n        const trace = new Trace(performanceController, OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\r\n        const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\r\n        trace.setStartTime(timeOriginUs);\r\n        // navigationTimings includes only one element.\r\n        if (navigationTimings && navigationTimings[0]) {\r\n            trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\r\n            trace.putMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));\r\n            trace.putMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));\r\n            trace.putMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));\r\n        }\r\n        const FIRST_PAINT = 'first-paint';\r\n        const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\r\n        if (paintTimings) {\r\n            const firstPaint = paintTimings.find(paintObject => paintObject.name === FIRST_PAINT);\r\n            if (firstPaint && firstPaint.startTime) {\r\n                trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));\r\n            }\r\n            const firstContentfulPaint = paintTimings.find(paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT);\r\n            if (firstContentfulPaint && firstContentfulPaint.startTime) {\r\n                trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));\r\n            }\r\n            if (firstInputDelay) {\r\n                trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));\r\n            }\r\n        }\r\n        logTrace(trace);\r\n    }\r\n    static createUserTimingTrace(performanceController, measureName) {\r\n        const trace = new Trace(performanceController, measureName, false, measureName);\r\n        logTrace(trace);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createNetworkRequestEntry(performanceController, entry) {\r\n    const performanceEntry = entry;\r\n    if (!performanceEntry || performanceEntry.responseStart === undefined) {\r\n        return;\r\n    }\r\n    const timeOrigin = Api.getInstance().getTimeOrigin();\r\n    const startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);\r\n    const timeToResponseInitiatedUs = performanceEntry.responseStart\r\n        ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000)\r\n        : undefined;\r\n    const timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000);\r\n    // Remove the query params from logged network request url.\r\n    const url = performanceEntry.name && performanceEntry.name.split('?')[0];\r\n    const networkRequest = {\r\n        performanceController,\r\n        url,\r\n        responsePayloadBytes: performanceEntry.transferSize,\r\n        startTimeUs,\r\n        timeToResponseInitiatedUs,\r\n        timeToResponseCompletedUs\r\n    };\r\n    logNetworkRequest(networkRequest);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst FID_WAIT_TIME_MS = 5000;\r\nfunction setupOobResources(performanceController) {\r\n    // Do not initialize unless iid is available.\r\n    if (!getIid()) {\r\n        return;\r\n    }\r\n    // The load event might not have fired yet, and that means performance navigation timing\r\n    // object has a duration of 0. The setup should run after all current tasks in js queue.\r\n    setTimeout(() => setupOobTraces(performanceController), 0);\r\n    setTimeout(() => setupNetworkRequests(performanceController), 0);\r\n    setTimeout(() => setupUserTimingTraces(performanceController), 0);\r\n}\r\nfunction setupNetworkRequests(performanceController) {\r\n    const api = Api.getInstance();\r\n    const resources = api.getEntriesByType('resource');\r\n    for (const resource of resources) {\r\n        createNetworkRequestEntry(performanceController, resource);\r\n    }\r\n    api.setupObserver('resource', entry => createNetworkRequestEntry(performanceController, entry));\r\n}\r\nfunction setupOobTraces(performanceController) {\r\n    const api = Api.getInstance();\r\n    const navigationTimings = api.getEntriesByType('navigation');\r\n    const paintTimings = api.getEntriesByType('paint');\r\n    // If First Input Desly polyfill is added to the page, report the fid value.\r\n    // https://github.com/GoogleChromeLabs/first-input-delay\r\n    if (api.onFirstInputDelay) {\r\n        // If the fid call back is not called for certain time, continue without it.\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        let timeoutId = setTimeout(() => {\r\n            Trace.createOobTrace(performanceController, navigationTimings, paintTimings);\r\n            timeoutId = undefined;\r\n        }, FID_WAIT_TIME_MS);\r\n        api.onFirstInputDelay((fid) => {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n                Trace.createOobTrace(performanceController, navigationTimings, paintTimings, fid);\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        Trace.createOobTrace(performanceController, navigationTimings, paintTimings);\r\n    }\r\n}\r\nfunction setupUserTimingTraces(performanceController) {\r\n    const api = Api.getInstance();\r\n    // Run through the measure performance entries collected up to this point.\r\n    const measures = api.getEntriesByType('measure');\r\n    for (const measure of measures) {\r\n        createUserTimingTrace(performanceController, measure);\r\n    }\r\n    // Setup an observer to capture the measures from this point on.\r\n    api.setupObserver('measure', entry => createUserTimingTrace(performanceController, entry));\r\n}\r\nfunction createUserTimingTrace(performanceController, measure) {\r\n    const measureName = measure.name;\r\n    // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\r\n    if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\r\n        TRACE_MEASURE_PREFIX) {\r\n        return;\r\n    }\r\n    Trace.createUserTimingTrace(performanceController, measureName);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PerformanceController {\r\n    constructor(app, installations) {\r\n        this.app = app;\r\n        this.installations = installations;\r\n        this.initialized = false;\r\n    }\r\n    /**\r\n     * This method *must* be called internally as part of creating a\r\n     * PerformanceController instance.\r\n     *\r\n     * Currently it's not possible to pass the settings object through the\r\n     * constructor using Components, so this method exists to be called with the\r\n     * desired settings, to ensure nothing is collected without the user's\r\n     * consent.\r\n     */\r\n    _init(settings) {\r\n        if (this.initialized) {\r\n            return;\r\n        }\r\n        if ((settings === null || settings === void 0 ? void 0 : settings.dataCollectionEnabled) !== undefined) {\r\n            this.dataCollectionEnabled = settings.dataCollectionEnabled;\r\n        }\r\n        if ((settings === null || settings === void 0 ? void 0 : settings.instrumentationEnabled) !== undefined) {\r\n            this.instrumentationEnabled = settings.instrumentationEnabled;\r\n        }\r\n        if (Api.getInstance().requiredApisAvailable()) {\r\n            validateIndexedDBOpenable()\r\n                .then(isAvailable => {\r\n                if (isAvailable) {\r\n                    setupTransportService();\r\n                    getInitializationPromise(this).then(() => setupOobResources(this), () => setupOobResources(this));\r\n                    this.initialized = true;\r\n                }\r\n            })\r\n                .catch(error => {\r\n                consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\r\n            });\r\n        }\r\n        else {\r\n            consoleLogger.info('Firebase Performance cannot start if the browser does not support ' +\r\n                '\"Fetch\" and \"Promise\", or cookies are disabled.');\r\n        }\r\n    }\r\n    set instrumentationEnabled(val) {\r\n        SettingsService.getInstance().instrumentationEnabled = val;\r\n    }\r\n    get instrumentationEnabled() {\r\n        return SettingsService.getInstance().instrumentationEnabled;\r\n    }\r\n    set dataCollectionEnabled(val) {\r\n        SettingsService.getInstance().dataCollectionEnabled = val;\r\n    }\r\n    get dataCollectionEnabled() {\r\n        return SettingsService.getInstance().dataCollectionEnabled;\r\n    }\r\n}\n\n/**\r\n * Firebase Performance Monitoring\r\n *\r\n * @packageDocumentation\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\n/**\r\n * Returns a {@link FirebasePerformance} instance for the given app.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @public\r\n */\r\nfunction getPerformance(app = getApp()) {\r\n    app = getModularInstance(app);\r\n    const provider = _getProvider(app, 'performance');\r\n    const perfInstance = provider.getImmediate();\r\n    return perfInstance;\r\n}\r\n/**\r\n * Returns a {@link FirebasePerformance} instance for the given app. Can only be called once.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @param settings - Optional settings for the {@link FirebasePerformance} instance.\r\n * @public\r\n */\r\nfunction initializePerformance(app, settings) {\r\n    app = getModularInstance(app);\r\n    const provider = _getProvider(app, 'performance');\r\n    // throw if an instance was already created.\r\n    // It could happen if initializePerformance() is called more than once, or getPerformance() is called first.\r\n    if (provider.isInitialized()) {\r\n        const existingInstance = provider.getImmediate();\r\n        const initialSettings = provider.getOptions();\r\n        if (deepEqual(initialSettings, settings !== null && settings !== void 0 ? settings : {})) {\r\n            return existingInstance;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"already initialized\" /* ErrorCode.ALREADY_INITIALIZED */);\r\n        }\r\n    }\r\n    const perfInstance = provider.initialize({\r\n        options: settings\r\n    });\r\n    return perfInstance;\r\n}\r\n/**\r\n * Returns a new `PerformanceTrace` instance.\r\n * @param performance - The {@link FirebasePerformance} instance to use.\r\n * @param name - The name of the trace.\r\n * @public\r\n */\r\nfunction trace(performance, name) {\r\n    performance = getModularInstance(performance);\r\n    return new Trace(performance, name);\r\n}\r\nconst factory = (container, { options: settings }) => {\r\n    // Dependencies\r\n    const app = container.getProvider('app').getImmediate();\r\n    const installations = container\r\n        .getProvider('installations-internal')\r\n        .getImmediate();\r\n    if (app.name !== DEFAULT_ENTRY_NAME) {\r\n        throw ERROR_FACTORY.create(\"FB not default\" /* ErrorCode.FB_NOT_DEFAULT */);\r\n    }\r\n    if (typeof window === 'undefined') {\r\n        throw ERROR_FACTORY.create(\"no window\" /* ErrorCode.NO_WINDOW */);\r\n    }\r\n    setupApi(window);\r\n    const perfInstance = new PerformanceController(app, installations);\r\n    perfInstance._init(settings);\r\n    return perfInstance;\r\n};\r\nfunction registerPerformance() {\r\n    _registerComponent(new Component('performance', factory, \"PUBLIC\" /* ComponentType.PUBLIC */));\r\n    registerVersion(name, version);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\r\nregisterPerformance();\n\nexport { getPerformance, initializePerformance, trace };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}