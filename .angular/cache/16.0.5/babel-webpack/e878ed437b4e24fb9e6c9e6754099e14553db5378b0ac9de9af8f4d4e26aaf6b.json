{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/55219/Desktop/Studio-Val-em-conclusao/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { _registerComponent, registerVersion, _getProvider, getApp } from '@firebase/app';\nimport { FirebaseError, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\nfunction mapValues(\n// { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no, f) {\n  const result = {};\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\n/**\r\n * Takes data and encodes it in a JSON-friendly way, such that types such as\r\n * Date are preserved.\r\n * @internal\r\n * @param data - Data to encode.\r\n */\nfunction encode(data) {\n  if (data == null) {\n    return null;\n  }\n  if (data instanceof Number) {\n    data = data.valueOf();\n  }\n  if (typeof data === 'number' && isFinite(data)) {\n    // Any number in JS is safe to put directly in JSON and parse as a double\n    // without any loss of precision.\n    return data;\n  }\n  if (data === true || data === false) {\n    return data;\n  }\n  if (Object.prototype.toString.call(data) === '[object String]') {\n    return data;\n  }\n  if (data instanceof Date) {\n    return data.toISOString();\n  }\n  if (Array.isArray(data)) {\n    return data.map(x => encode(x));\n  }\n  if (typeof data === 'function' || typeof data === 'object') {\n    return mapValues(data, x => encode(x));\n  }\n  // If we got this far, the data is not encodable.\n  throw new Error('Data cannot be encoded in JSON: ' + data);\n}\n/**\r\n * Takes data that's been encoded in a JSON-friendly form and returns a form\r\n * with richer datatypes, such as Dates, etc.\r\n * @internal\r\n * @param json - JSON to convert.\r\n */\nfunction decode(json) {\n  if (json == null) {\n    return json;\n  }\n  if (json['@type']) {\n    switch (json['@type']) {\n      case LONG_TYPE:\n      // Fall through and handle this the same as unsigned.\n      case UNSIGNED_LONG_TYPE:\n        {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          const value = Number(json['value']);\n          if (isNaN(value)) {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n          return value;\n        }\n      default:\n        {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n    }\n  }\n  if (Array.isArray(json)) {\n    return json.map(x => decode(x));\n  }\n  if (typeof json === 'function' || typeof json === 'object') {\n    return mapValues(json, x => decode(x));\n  }\n  // Anything else is safe to return.\n  return json;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Functions.\r\n */\nconst FUNCTIONS_TYPE = 'functions';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Standard error codes for different ways a request can fail, as defined by:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * This map is used primarily to convert from a backend error code string to\r\n * a client SDK error code string, and make sure it's in the supported set.\r\n */\nconst errorCodeMap = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n/**\r\n * An explicit error that can be thrown from a handler to send an error to the\r\n * client that called the function.\r\n */\nclass FunctionsError extends FirebaseError {\n  constructor(\n  /**\r\n   * A standard error code that will be returned to the client. This also\r\n   * determines the HTTP status code of the response, as defined in code.proto.\r\n   */\n  code, message,\n  /**\r\n   * Extra data to be converted to JSON and included in the error response.\r\n   */\n  details) {\n    super(`${FUNCTIONS_TYPE}/${code}`, message || '');\n    this.details = details;\n  }\n}\n/**\r\n * Takes an HTTP status code and returns the corresponding ErrorCode.\r\n * This is the standard HTTP status code -> error mapping defined in:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * @param status An HTTP status code.\r\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\r\n */\nfunction codeForHTTPStatus(status) {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n  }\n  return 'unknown';\n}\n/**\r\n * Takes an HTTP response and returns the corresponding Error, if any.\r\n */\nfunction _errorForResponse(status, bodyJSON) {\n  let code = codeForHTTPStatus(status);\n  // Start with reasonable defaults from the status code.\n  let description = code;\n  let details = undefined;\n  // Then look through the body for explicit details.\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      const status = errorJSON.status;\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new FunctionsError('internal', 'internal');\n        }\n        code = errorCodeMap[status];\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status;\n      }\n      const message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n  return new FunctionsError(code, description, details);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Helper class to get metadata that should be included with a function call.\r\n * @internal\r\n */\nclass ContextProvider {\n  constructor(authProvider, messagingProvider, appCheckProvider) {\n    this.auth = null;\n    this.messaging = null;\n    this.appCheck = null;\n    this.auth = authProvider.getImmediate({\n      optional: true\n    });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n    if (!this.auth) {\n      authProvider.get().then(auth => this.auth = auth, () => {\n        /* get() never rejects */\n      });\n    }\n    if (!this.messaging) {\n      messagingProvider.get().then(messaging => this.messaging = messaging, () => {\n        /* get() never rejects */\n      });\n    }\n    if (!this.appCheck) {\n      appCheckProvider.get().then(appCheck => this.appCheck = appCheck, () => {\n        /* get() never rejects */\n      });\n    }\n  }\n  getAuthToken() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.auth) {\n        return undefined;\n      }\n      try {\n        const token = yield _this.auth.getToken();\n        return token === null || token === void 0 ? void 0 : token.accessToken;\n      } catch (e) {\n        // If there's any error when trying to get the auth token, leave it off.\n        return undefined;\n      }\n    })();\n  }\n  getMessagingToken() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this2.messaging || !('Notification' in self) || Notification.permission !== 'granted') {\n        return undefined;\n      }\n      try {\n        return yield _this2.messaging.getToken();\n      } catch (e) {\n        // We don't warn on this, because it usually means messaging isn't set up.\n        // console.warn('Failed to retrieve instance id token.', e);\n        // If there's any error when trying to get the token, leave it off.\n        return undefined;\n      }\n    })();\n  }\n  getAppCheckToken() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3.appCheck) {\n        const result = yield _this3.appCheck.getToken();\n        if (result.error) {\n          // Do not send the App Check header to the functions endpoint if\n          // there was an error from the App Check exchange endpoint. The App\n          // Check SDK will already have logged the error to console.\n          return null;\n        }\n        return result.token;\n      }\n      return null;\n    })();\n  }\n  getContext() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const authToken = yield _this4.getAuthToken();\n      const messagingToken = yield _this4.getMessagingToken();\n      const appCheckToken = yield _this4.getAppCheckToken();\n      return {\n        authToken,\n        messagingToken,\n        appCheckToken\n      };\n    })();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DEFAULT_REGION = 'us-central1';\n/**\r\n * Returns a Promise that will be rejected after the given duration.\r\n * The error will be of type FunctionsError.\r\n *\r\n * @param millis Number of milliseconds to wait before rejecting.\r\n */\nfunction failAfter(millis) {\n  // Node timers and browser timers are fundamentally incompatible, but we\n  // don't care about the value here\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timer = null;\n  return {\n    promise: new Promise((_, reject) => {\n      timer = setTimeout(() => {\n        reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));\n      }, millis);\n    }),\n    cancel: () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    }\n  };\n}\n/**\r\n * The main class for the Firebase Functions SDK.\r\n * @internal\r\n */\nclass FunctionsService {\n  /**\r\n   * Creates a new Functions service for the given app.\r\n   * @param app - The FirebaseApp to use.\r\n   */\n  constructor(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain = DEFAULT_REGION, fetchImpl) {\n    this.app = app;\n    this.fetchImpl = fetchImpl;\n    this.emulatorOrigin = null;\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider, appCheckProvider);\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return Promise.resolve(resolve());\n      };\n    });\n    // Resolve the region or custom domain overload by attempting to parse it.\n    try {\n      const url = new URL(regionOrCustomDomain);\n      this.customDomain = url.origin;\n      this.region = DEFAULT_REGION;\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain;\n    }\n  }\n  _delete() {\n    return this.deleteService();\n  }\n  /**\r\n   * Returns the URL for a callable with the given name.\r\n   * @param name - The name of the callable.\r\n   * @internal\r\n   */\n  _url(name) {\n    const projectId = this.app.options.projectId;\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${this.region}/${name}`;\n    }\n    if (this.customDomain !== null) {\n      return `${this.customDomain}/${name}`;\n    }\n    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n}\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host The emulator host (ex: localhost)\r\n * @param port The emulator port (ex: 5001)\r\n * @public\r\n */\nfunction connectFunctionsEmulator$1(functionsInstance, host, port) {\n  functionsInstance.emulatorOrigin = `http://${host}:${port}`;\n}\n/**\r\n * Returns a reference to the callable https trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\nfunction httpsCallable$1(functionsInstance, name, options) {\n  return data => {\n    return call(functionsInstance, name, data, options || {});\n  };\n}\n/**\r\n * Returns a reference to the callable https trigger with the given url.\r\n * @param url - The url of the trigger.\r\n * @public\r\n */\nfunction httpsCallableFromURL$1(functionsInstance, url, options) {\n  return data => {\n    return callAtURL(functionsInstance, url, data, options || {});\n  };\n}\n/**\r\n * Does an HTTP POST and returns the completed response.\r\n * @param url The url to post to.\r\n * @param body The JSON body of the post.\r\n * @param headers The HTTP headers to include in the request.\r\n * @return A Promise that will succeed when the request finishes.\r\n */\nfunction postJSON(_x, _x2, _x3, _x4) {\n  return _postJSON.apply(this, arguments);\n}\n/**\r\n * Calls a callable function asynchronously and returns the result.\r\n * @param name The name of the callable trigger.\r\n * @param data The data to pass as params to the function.s\r\n */\nfunction _postJSON() {\n  _postJSON = _asyncToGenerator(function* (url, body, headers, fetchImpl) {\n    headers['Content-Type'] = 'application/json';\n    let response;\n    try {\n      response = yield fetchImpl(url, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers\n      });\n    } catch (e) {\n      // This could be an unhandled error on the backend, or it could be a\n      // network error. There's no way to know, since an unhandled error on the\n      // backend will fail to set the proper CORS header, and thus will be\n      // treated as a network error by fetch.\n      return {\n        status: 0,\n        json: null\n      };\n    }\n    let json = null;\n    try {\n      json = yield response.json();\n    } catch (e) {\n      // If we fail to parse JSON, it will fail the same as an empty body.\n    }\n    return {\n      status: response.status,\n      json\n    };\n  });\n  return _postJSON.apply(this, arguments);\n}\nfunction call(functionsInstance, name, data, options) {\n  const url = functionsInstance._url(name);\n  return callAtURL(functionsInstance, url, data, options);\n}\n/**\r\n * Calls a callable function asynchronously and returns the result.\r\n * @param url The url of the callable trigger.\r\n * @param data The data to pass as params to the function.s\r\n */\nfunction callAtURL(_x5, _x6, _x7, _x8) {\n  return _callAtURL.apply(this, arguments);\n}\nfunction _callAtURL() {\n  _callAtURL = _asyncToGenerator(function* (functionsInstance, url, data, options) {\n    // Encode any special types, such as dates, in the input data.\n    data = encode(data);\n    const body = {\n      data\n    };\n    // Add a header for the authToken.\n    const headers = {};\n    const context = yield functionsInstance.contextProvider.getContext();\n    if (context.authToken) {\n      headers['Authorization'] = 'Bearer ' + context.authToken;\n    }\n    if (context.messagingToken) {\n      headers['Firebase-Instance-ID-Token'] = context.messagingToken;\n    }\n    if (context.appCheckToken !== null) {\n      headers['X-Firebase-AppCheck'] = context.appCheckToken;\n    }\n    // Default timeout to 70s, but let the options override it.\n    const timeout = options.timeout || 70000;\n    const failAfterHandle = failAfter(timeout);\n    const response = yield Promise.race([postJSON(url, body, headers, functionsInstance.fetchImpl), failAfterHandle.promise, functionsInstance.cancelAllRequests]);\n    // Always clear the failAfter timeout\n    failAfterHandle.cancel();\n    // If service was deleted, interrupted response throws an error.\n    if (!response) {\n      throw new FunctionsError('cancelled', 'Firebase Functions instance was deleted.');\n    }\n    // Check for an error status, regardless of http status.\n    const error = _errorForResponse(response.status, response.json);\n    if (error) {\n      throw error;\n    }\n    if (!response.json) {\n      throw new FunctionsError('internal', 'Response is not valid JSON object.');\n    }\n    let responseData = response.json.data;\n    // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n    // backwards compatibility.\n    if (typeof responseData === 'undefined') {\n      responseData = response.json.result;\n    }\n    if (typeof responseData === 'undefined') {\n      // Consider the response malformed.\n      throw new FunctionsError('internal', 'Response is missing data field.');\n    }\n    // Decode any special types, such as dates, in the returned data.\n    const decodedData = decode(responseData);\n    return {\n      data: decodedData\n    };\n  });\n  return _callAtURL.apply(this, arguments);\n}\nconst name = \"@firebase/functions\";\nconst version = \"0.9.4\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst AUTH_INTERNAL_NAME = 'auth-internal';\nconst APP_CHECK_INTERNAL_NAME = 'app-check-internal';\nconst MESSAGING_INTERNAL_NAME = 'messaging-internal';\nfunction registerFunctions(fetchImpl, variant) {\n  const factory = (container, {\n    instanceIdentifier: regionOrCustomDomain\n  }) => {\n    // Dependencies\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider(AUTH_INTERNAL_NAME);\n    const messagingProvider = container.getProvider(MESSAGING_INTERNAL_NAME);\n    const appCheckProvider = container.getProvider(APP_CHECK_INTERNAL_NAME);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new FunctionsService(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain, fetchImpl);\n  };\n  _registerComponent(new Component(FUNCTIONS_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a {@link Functions} instance for the given app.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @param regionOrCustomDomain - one of:\r\n *   a) The region the callable functions are located in (ex: us-central1)\r\n *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)\r\n * @public\r\n */\nfunction getFunctions(app = getApp(), regionOrCustomDomain = DEFAULT_REGION) {\n  // Dependencies\n  const functionsProvider = _getProvider(getModularInstance(app), FUNCTIONS_TYPE);\n  const functionsInstance = functionsProvider.getImmediate({\n    identifier: regionOrCustomDomain\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('functions');\n  if (emulator) {\n    connectFunctionsEmulator(functionsInstance, ...emulator);\n  }\n  return functionsInstance;\n}\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @public\r\n */\nfunction connectFunctionsEmulator(functionsInstance, host, port) {\n  connectFunctionsEmulator$1(getModularInstance(functionsInstance), host, port);\n}\n/**\r\n * Returns a reference to the callable HTTPS trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\nfunction httpsCallable(functionsInstance, name, options) {\n  return httpsCallable$1(getModularInstance(functionsInstance), name, options);\n}\n/**\r\n * Returns a reference to the callable HTTPS trigger with the specified url.\r\n * @param url - The url of the trigger.\r\n * @public\r\n */\nfunction httpsCallableFromURL(functionsInstance, url, options) {\n  return httpsCallableFromURL$1(getModularInstance(functionsInstance), url, options);\n}\n\n/**\r\n * Cloud Functions for Firebase\r\n *\r\n * @packageDocumentation\r\n */\nregisterFunctions(fetch.bind(self));\nexport { connectFunctionsEmulator, getFunctions, httpsCallable, httpsCallableFromURL };","map":{"version":3,"names":["_registerComponent","registerVersion","_getProvider","getApp","FirebaseError","getModularInstance","getDefaultEmulatorHostnameAndPort","Component","LONG_TYPE","UNSIGNED_LONG_TYPE","mapValues","o","f","result","key","hasOwnProperty","encode","data","Number","valueOf","isFinite","Object","prototype","toString","call","Date","toISOString","Array","isArray","map","x","Error","decode","json","value","isNaN","FUNCTIONS_TYPE","errorCodeMap","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","FunctionsError","constructor","code","message","details","codeForHTTPStatus","status","_errorForResponse","bodyJSON","description","undefined","errorJSON","error","e","ContextProvider","authProvider","messagingProvider","appCheckProvider","auth","messaging","appCheck","getImmediate","optional","get","then","getAuthToken","_this","_asyncToGenerator","token","getToken","accessToken","getMessagingToken","_this2","self","Notification","permission","getAppCheckToken","_this3","getContext","_this4","authToken","messagingToken","appCheckToken","DEFAULT_REGION","failAfter","millis","timer","promise","Promise","_","reject","setTimeout","cancel","clearTimeout","FunctionsService","app","regionOrCustomDomain","fetchImpl","emulatorOrigin","contextProvider","cancelAllRequests","resolve","deleteService","url","URL","customDomain","origin","region","_delete","_url","name","projectId","options","connectFunctionsEmulator$1","functionsInstance","host","port","httpsCallable$1","httpsCallableFromURL$1","callAtURL","postJSON","_x","_x2","_x3","_x4","_postJSON","apply","arguments","body","headers","response","method","JSON","stringify","_x5","_x6","_x7","_x8","_callAtURL","context","timeout","failAfterHandle","race","responseData","decodedData","version","AUTH_INTERNAL_NAME","APP_CHECK_INTERNAL_NAME","MESSAGING_INTERNAL_NAME","registerFunctions","variant","factory","container","instanceIdentifier","getProvider","setMultipleInstances","getFunctions","functionsProvider","identifier","emulator","connectFunctionsEmulator","httpsCallable","httpsCallableFromURL","fetch","bind"],"sources":["C:/Users/55219/Desktop/Studio-Val-em-conclusao/node_modules/@firebase/functions/dist/index.esm2017.js"],"sourcesContent":["import { _registerComponent, registerVersion, _getProvider, getApp } from '@firebase/app';\nimport { FirebaseError, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\r\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\r\nfunction mapValues(\r\n// { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\no, f) {\r\n    const result = {};\r\n    for (const key in o) {\r\n        if (o.hasOwnProperty(key)) {\r\n            result[key] = f(o[key]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Takes data and encodes it in a JSON-friendly way, such that types such as\r\n * Date are preserved.\r\n * @internal\r\n * @param data - Data to encode.\r\n */\r\nfunction encode(data) {\r\n    if (data == null) {\r\n        return null;\r\n    }\r\n    if (data instanceof Number) {\r\n        data = data.valueOf();\r\n    }\r\n    if (typeof data === 'number' && isFinite(data)) {\r\n        // Any number in JS is safe to put directly in JSON and parse as a double\r\n        // without any loss of precision.\r\n        return data;\r\n    }\r\n    if (data === true || data === false) {\r\n        return data;\r\n    }\r\n    if (Object.prototype.toString.call(data) === '[object String]') {\r\n        return data;\r\n    }\r\n    if (data instanceof Date) {\r\n        return data.toISOString();\r\n    }\r\n    if (Array.isArray(data)) {\r\n        return data.map(x => encode(x));\r\n    }\r\n    if (typeof data === 'function' || typeof data === 'object') {\r\n        return mapValues(data, x => encode(x));\r\n    }\r\n    // If we got this far, the data is not encodable.\r\n    throw new Error('Data cannot be encoded in JSON: ' + data);\r\n}\r\n/**\r\n * Takes data that's been encoded in a JSON-friendly form and returns a form\r\n * with richer datatypes, such as Dates, etc.\r\n * @internal\r\n * @param json - JSON to convert.\r\n */\r\nfunction decode(json) {\r\n    if (json == null) {\r\n        return json;\r\n    }\r\n    if (json['@type']) {\r\n        switch (json['@type']) {\r\n            case LONG_TYPE:\r\n            // Fall through and handle this the same as unsigned.\r\n            case UNSIGNED_LONG_TYPE: {\r\n                // Technically, this could work return a valid number for malformed\r\n                // data if there was a number followed by garbage. But it's just not\r\n                // worth all the extra code to detect that case.\r\n                const value = Number(json['value']);\r\n                if (isNaN(value)) {\r\n                    throw new Error('Data cannot be decoded from JSON: ' + json);\r\n                }\r\n                return value;\r\n            }\r\n            default: {\r\n                throw new Error('Data cannot be decoded from JSON: ' + json);\r\n            }\r\n        }\r\n    }\r\n    if (Array.isArray(json)) {\r\n        return json.map(x => decode(x));\r\n    }\r\n    if (typeof json === 'function' || typeof json === 'object') {\r\n        return mapValues(json, x => decode(x));\r\n    }\r\n    // Anything else is safe to return.\r\n    return json;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Functions.\r\n */\r\nconst FUNCTIONS_TYPE = 'functions';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Standard error codes for different ways a request can fail, as defined by:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * This map is used primarily to convert from a backend error code string to\r\n * a client SDK error code string, and make sure it's in the supported set.\r\n */\r\nconst errorCodeMap = {\r\n    OK: 'ok',\r\n    CANCELLED: 'cancelled',\r\n    UNKNOWN: 'unknown',\r\n    INVALID_ARGUMENT: 'invalid-argument',\r\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\r\n    NOT_FOUND: 'not-found',\r\n    ALREADY_EXISTS: 'already-exists',\r\n    PERMISSION_DENIED: 'permission-denied',\r\n    UNAUTHENTICATED: 'unauthenticated',\r\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\r\n    FAILED_PRECONDITION: 'failed-precondition',\r\n    ABORTED: 'aborted',\r\n    OUT_OF_RANGE: 'out-of-range',\r\n    UNIMPLEMENTED: 'unimplemented',\r\n    INTERNAL: 'internal',\r\n    UNAVAILABLE: 'unavailable',\r\n    DATA_LOSS: 'data-loss'\r\n};\r\n/**\r\n * An explicit error that can be thrown from a handler to send an error to the\r\n * client that called the function.\r\n */\r\nclass FunctionsError extends FirebaseError {\r\n    constructor(\r\n    /**\r\n     * A standard error code that will be returned to the client. This also\r\n     * determines the HTTP status code of the response, as defined in code.proto.\r\n     */\r\n    code, message, \r\n    /**\r\n     * Extra data to be converted to JSON and included in the error response.\r\n     */\r\n    details) {\r\n        super(`${FUNCTIONS_TYPE}/${code}`, message || '');\r\n        this.details = details;\r\n    }\r\n}\r\n/**\r\n * Takes an HTTP status code and returns the corresponding ErrorCode.\r\n * This is the standard HTTP status code -> error mapping defined in:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * @param status An HTTP status code.\r\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\r\n */\r\nfunction codeForHTTPStatus(status) {\r\n    // Make sure any successful status is OK.\r\n    if (status >= 200 && status < 300) {\r\n        return 'ok';\r\n    }\r\n    switch (status) {\r\n        case 0:\r\n            // This can happen if the server returns 500.\r\n            return 'internal';\r\n        case 400:\r\n            return 'invalid-argument';\r\n        case 401:\r\n            return 'unauthenticated';\r\n        case 403:\r\n            return 'permission-denied';\r\n        case 404:\r\n            return 'not-found';\r\n        case 409:\r\n            return 'aborted';\r\n        case 429:\r\n            return 'resource-exhausted';\r\n        case 499:\r\n            return 'cancelled';\r\n        case 500:\r\n            return 'internal';\r\n        case 501:\r\n            return 'unimplemented';\r\n        case 503:\r\n            return 'unavailable';\r\n        case 504:\r\n            return 'deadline-exceeded';\r\n    }\r\n    return 'unknown';\r\n}\r\n/**\r\n * Takes an HTTP response and returns the corresponding Error, if any.\r\n */\r\nfunction _errorForResponse(status, bodyJSON) {\r\n    let code = codeForHTTPStatus(status);\r\n    // Start with reasonable defaults from the status code.\r\n    let description = code;\r\n    let details = undefined;\r\n    // Then look through the body for explicit details.\r\n    try {\r\n        const errorJSON = bodyJSON && bodyJSON.error;\r\n        if (errorJSON) {\r\n            const status = errorJSON.status;\r\n            if (typeof status === 'string') {\r\n                if (!errorCodeMap[status]) {\r\n                    // They must've included an unknown error code in the body.\r\n                    return new FunctionsError('internal', 'internal');\r\n                }\r\n                code = errorCodeMap[status];\r\n                // TODO(klimt): Add better default descriptions for error enums.\r\n                // The default description needs to be updated for the new code.\r\n                description = status;\r\n            }\r\n            const message = errorJSON.message;\r\n            if (typeof message === 'string') {\r\n                description = message;\r\n            }\r\n            details = errorJSON.details;\r\n            if (details !== undefined) {\r\n                details = decode(details);\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        // If we couldn't parse explicit error data, that's fine.\r\n    }\r\n    if (code === 'ok') {\r\n        // Technically, there's an edge case where a developer could explicitly\r\n        // return an error code of OK, and we will treat it as success, but that\r\n        // seems reasonable.\r\n        return null;\r\n    }\r\n    return new FunctionsError(code, description, details);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper class to get metadata that should be included with a function call.\r\n * @internal\r\n */\r\nclass ContextProvider {\r\n    constructor(authProvider, messagingProvider, appCheckProvider) {\r\n        this.auth = null;\r\n        this.messaging = null;\r\n        this.appCheck = null;\r\n        this.auth = authProvider.getImmediate({ optional: true });\r\n        this.messaging = messagingProvider.getImmediate({\r\n            optional: true\r\n        });\r\n        if (!this.auth) {\r\n            authProvider.get().then(auth => (this.auth = auth), () => {\r\n                /* get() never rejects */\r\n            });\r\n        }\r\n        if (!this.messaging) {\r\n            messagingProvider.get().then(messaging => (this.messaging = messaging), () => {\r\n                /* get() never rejects */\r\n            });\r\n        }\r\n        if (!this.appCheck) {\r\n            appCheckProvider.get().then(appCheck => (this.appCheck = appCheck), () => {\r\n                /* get() never rejects */\r\n            });\r\n        }\r\n    }\r\n    async getAuthToken() {\r\n        if (!this.auth) {\r\n            return undefined;\r\n        }\r\n        try {\r\n            const token = await this.auth.getToken();\r\n            return token === null || token === void 0 ? void 0 : token.accessToken;\r\n        }\r\n        catch (e) {\r\n            // If there's any error when trying to get the auth token, leave it off.\r\n            return undefined;\r\n        }\r\n    }\r\n    async getMessagingToken() {\r\n        if (!this.messaging ||\r\n            !('Notification' in self) ||\r\n            Notification.permission !== 'granted') {\r\n            return undefined;\r\n        }\r\n        try {\r\n            return await this.messaging.getToken();\r\n        }\r\n        catch (e) {\r\n            // We don't warn on this, because it usually means messaging isn't set up.\r\n            // console.warn('Failed to retrieve instance id token.', e);\r\n            // If there's any error when trying to get the token, leave it off.\r\n            return undefined;\r\n        }\r\n    }\r\n    async getAppCheckToken() {\r\n        if (this.appCheck) {\r\n            const result = await this.appCheck.getToken();\r\n            if (result.error) {\r\n                // Do not send the App Check header to the functions endpoint if\r\n                // there was an error from the App Check exchange endpoint. The App\r\n                // Check SDK will already have logged the error to console.\r\n                return null;\r\n            }\r\n            return result.token;\r\n        }\r\n        return null;\r\n    }\r\n    async getContext() {\r\n        const authToken = await this.getAuthToken();\r\n        const messagingToken = await this.getMessagingToken();\r\n        const appCheckToken = await this.getAppCheckToken();\r\n        return { authToken, messagingToken, appCheckToken };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_REGION = 'us-central1';\r\n/**\r\n * Returns a Promise that will be rejected after the given duration.\r\n * The error will be of type FunctionsError.\r\n *\r\n * @param millis Number of milliseconds to wait before rejecting.\r\n */\r\nfunction failAfter(millis) {\r\n    // Node timers and browser timers are fundamentally incompatible, but we\r\n    // don't care about the value here\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let timer = null;\r\n    return {\r\n        promise: new Promise((_, reject) => {\r\n            timer = setTimeout(() => {\r\n                reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));\r\n            }, millis);\r\n        }),\r\n        cancel: () => {\r\n            if (timer) {\r\n                clearTimeout(timer);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * The main class for the Firebase Functions SDK.\r\n * @internal\r\n */\r\nclass FunctionsService {\r\n    /**\r\n     * Creates a new Functions service for the given app.\r\n     * @param app - The FirebaseApp to use.\r\n     */\r\n    constructor(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain = DEFAULT_REGION, fetchImpl) {\r\n        this.app = app;\r\n        this.fetchImpl = fetchImpl;\r\n        this.emulatorOrigin = null;\r\n        this.contextProvider = new ContextProvider(authProvider, messagingProvider, appCheckProvider);\r\n        // Cancels all ongoing requests when resolved.\r\n        this.cancelAllRequests = new Promise(resolve => {\r\n            this.deleteService = () => {\r\n                return Promise.resolve(resolve());\r\n            };\r\n        });\r\n        // Resolve the region or custom domain overload by attempting to parse it.\r\n        try {\r\n            const url = new URL(regionOrCustomDomain);\r\n            this.customDomain = url.origin;\r\n            this.region = DEFAULT_REGION;\r\n        }\r\n        catch (e) {\r\n            this.customDomain = null;\r\n            this.region = regionOrCustomDomain;\r\n        }\r\n    }\r\n    _delete() {\r\n        return this.deleteService();\r\n    }\r\n    /**\r\n     * Returns the URL for a callable with the given name.\r\n     * @param name - The name of the callable.\r\n     * @internal\r\n     */\r\n    _url(name) {\r\n        const projectId = this.app.options.projectId;\r\n        if (this.emulatorOrigin !== null) {\r\n            const origin = this.emulatorOrigin;\r\n            return `${origin}/${projectId}/${this.region}/${name}`;\r\n        }\r\n        if (this.customDomain !== null) {\r\n            return `${this.customDomain}/${name}`;\r\n        }\r\n        return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\r\n    }\r\n}\r\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host The emulator host (ex: localhost)\r\n * @param port The emulator port (ex: 5001)\r\n * @public\r\n */\r\nfunction connectFunctionsEmulator$1(functionsInstance, host, port) {\r\n    functionsInstance.emulatorOrigin = `http://${host}:${port}`;\r\n}\r\n/**\r\n * Returns a reference to the callable https trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\r\nfunction httpsCallable$1(functionsInstance, name, options) {\r\n    return (data => {\r\n        return call(functionsInstance, name, data, options || {});\r\n    });\r\n}\r\n/**\r\n * Returns a reference to the callable https trigger with the given url.\r\n * @param url - The url of the trigger.\r\n * @public\r\n */\r\nfunction httpsCallableFromURL$1(functionsInstance, url, options) {\r\n    return (data => {\r\n        return callAtURL(functionsInstance, url, data, options || {});\r\n    });\r\n}\r\n/**\r\n * Does an HTTP POST and returns the completed response.\r\n * @param url The url to post to.\r\n * @param body The JSON body of the post.\r\n * @param headers The HTTP headers to include in the request.\r\n * @return A Promise that will succeed when the request finishes.\r\n */\r\nasync function postJSON(url, body, headers, fetchImpl) {\r\n    headers['Content-Type'] = 'application/json';\r\n    let response;\r\n    try {\r\n        response = await fetchImpl(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n            headers\r\n        });\r\n    }\r\n    catch (e) {\r\n        // This could be an unhandled error on the backend, or it could be a\r\n        // network error. There's no way to know, since an unhandled error on the\r\n        // backend will fail to set the proper CORS header, and thus will be\r\n        // treated as a network error by fetch.\r\n        return {\r\n            status: 0,\r\n            json: null\r\n        };\r\n    }\r\n    let json = null;\r\n    try {\r\n        json = await response.json();\r\n    }\r\n    catch (e) {\r\n        // If we fail to parse JSON, it will fail the same as an empty body.\r\n    }\r\n    return {\r\n        status: response.status,\r\n        json\r\n    };\r\n}\r\n/**\r\n * Calls a callable function asynchronously and returns the result.\r\n * @param name The name of the callable trigger.\r\n * @param data The data to pass as params to the function.s\r\n */\r\nfunction call(functionsInstance, name, data, options) {\r\n    const url = functionsInstance._url(name);\r\n    return callAtURL(functionsInstance, url, data, options);\r\n}\r\n/**\r\n * Calls a callable function asynchronously and returns the result.\r\n * @param url The url of the callable trigger.\r\n * @param data The data to pass as params to the function.s\r\n */\r\nasync function callAtURL(functionsInstance, url, data, options) {\r\n    // Encode any special types, such as dates, in the input data.\r\n    data = encode(data);\r\n    const body = { data };\r\n    // Add a header for the authToken.\r\n    const headers = {};\r\n    const context = await functionsInstance.contextProvider.getContext();\r\n    if (context.authToken) {\r\n        headers['Authorization'] = 'Bearer ' + context.authToken;\r\n    }\r\n    if (context.messagingToken) {\r\n        headers['Firebase-Instance-ID-Token'] = context.messagingToken;\r\n    }\r\n    if (context.appCheckToken !== null) {\r\n        headers['X-Firebase-AppCheck'] = context.appCheckToken;\r\n    }\r\n    // Default timeout to 70s, but let the options override it.\r\n    const timeout = options.timeout || 70000;\r\n    const failAfterHandle = failAfter(timeout);\r\n    const response = await Promise.race([\r\n        postJSON(url, body, headers, functionsInstance.fetchImpl),\r\n        failAfterHandle.promise,\r\n        functionsInstance.cancelAllRequests\r\n    ]);\r\n    // Always clear the failAfter timeout\r\n    failAfterHandle.cancel();\r\n    // If service was deleted, interrupted response throws an error.\r\n    if (!response) {\r\n        throw new FunctionsError('cancelled', 'Firebase Functions instance was deleted.');\r\n    }\r\n    // Check for an error status, regardless of http status.\r\n    const error = _errorForResponse(response.status, response.json);\r\n    if (error) {\r\n        throw error;\r\n    }\r\n    if (!response.json) {\r\n        throw new FunctionsError('internal', 'Response is not valid JSON object.');\r\n    }\r\n    let responseData = response.json.data;\r\n    // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\r\n    // backwards compatibility.\r\n    if (typeof responseData === 'undefined') {\r\n        responseData = response.json.result;\r\n    }\r\n    if (typeof responseData === 'undefined') {\r\n        // Consider the response malformed.\r\n        throw new FunctionsError('internal', 'Response is missing data field.');\r\n    }\r\n    // Decode any special types, such as dates, in the returned data.\r\n    const decodedData = decode(responseData);\r\n    return { data: decodedData };\r\n}\n\nconst name = \"@firebase/functions\";\nconst version = \"0.9.4\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst AUTH_INTERNAL_NAME = 'auth-internal';\r\nconst APP_CHECK_INTERNAL_NAME = 'app-check-internal';\r\nconst MESSAGING_INTERNAL_NAME = 'messaging-internal';\r\nfunction registerFunctions(fetchImpl, variant) {\r\n    const factory = (container, { instanceIdentifier: regionOrCustomDomain }) => {\r\n        // Dependencies\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider(AUTH_INTERNAL_NAME);\r\n        const messagingProvider = container.getProvider(MESSAGING_INTERNAL_NAME);\r\n        const appCheckProvider = container.getProvider(APP_CHECK_INTERNAL_NAME);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return new FunctionsService(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain, fetchImpl);\r\n    };\r\n    _registerComponent(new Component(FUNCTIONS_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a {@link Functions} instance for the given app.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @param regionOrCustomDomain - one of:\r\n *   a) The region the callable functions are located in (ex: us-central1)\r\n *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)\r\n * @public\r\n */\r\nfunction getFunctions(app = getApp(), regionOrCustomDomain = DEFAULT_REGION) {\r\n    // Dependencies\r\n    const functionsProvider = _getProvider(getModularInstance(app), FUNCTIONS_TYPE);\r\n    const functionsInstance = functionsProvider.getImmediate({\r\n        identifier: regionOrCustomDomain\r\n    });\r\n    const emulator = getDefaultEmulatorHostnameAndPort('functions');\r\n    if (emulator) {\r\n        connectFunctionsEmulator(functionsInstance, ...emulator);\r\n    }\r\n    return functionsInstance;\r\n}\r\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @public\r\n */\r\nfunction connectFunctionsEmulator(functionsInstance, host, port) {\r\n    connectFunctionsEmulator$1(getModularInstance(functionsInstance), host, port);\r\n}\r\n/**\r\n * Returns a reference to the callable HTTPS trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\r\nfunction httpsCallable(functionsInstance, name, options) {\r\n    return httpsCallable$1(getModularInstance(functionsInstance), name, options);\r\n}\r\n/**\r\n * Returns a reference to the callable HTTPS trigger with the specified url.\r\n * @param url - The url of the trigger.\r\n * @public\r\n */\r\nfunction httpsCallableFromURL(functionsInstance, url, options) {\r\n    return httpsCallableFromURL$1(getModularInstance(functionsInstance), url, options);\r\n}\n\n/**\r\n * Cloud Functions for Firebase\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterFunctions(fetch.bind(self));\n\nexport { connectFunctionsEmulator, getFunctions, httpsCallable, httpsCallableFromURL };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}