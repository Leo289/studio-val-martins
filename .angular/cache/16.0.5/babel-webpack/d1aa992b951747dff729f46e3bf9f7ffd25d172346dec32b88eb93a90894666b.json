{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/55219/Desktop/Studio-Val-em-conclusao/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { addDoc, collection, getDocs, query, where } from '@angular/fire/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nclass NewsletterService {\n  constructor(firestore) {\n    this.firestore = firestore;\n  }\n  addNewsletter(newsletter) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      console.log('Iniciando addNewsletter'); // Log adicionado\n      // Verifica se o email já existe na coleção\n      const newsletterRef = collection(_this.firestore, 'newsletter');\n      const emailExistsQuery = query(newsletterRef, where('email', '==', newsletter.email));\n      const emailExistsDocs = yield getDocs(emailExistsQuery);\n      if (emailExistsDocs.size > 0) {\n        // Email já existe na coleção\n        console.log('Email já cadastrado'); // Log adicionado\n        return Promise.reject('Email já cadastrado.');\n      } else {\n        // Adiciona o documento na coleção\n        const newsletterDoc = yield addDoc(newsletterRef, newsletter);\n        console.log(`Documento adicionado com sucesso: ${newsletterDoc.id}`); // Log adicionado\n        return Promise.resolve(newsletterDoc.id);\n      }\n      console.log('Finalizando addNewsletter'); // Log adicionado\n    })();\n  }\n}\n\nNewsletterService.ɵfac = function NewsletterService_Factory(t) {\n  return new (t || NewsletterService)(i0.ɵɵinject(i1.Firestore));\n};\nNewsletterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NewsletterService,\n  factory: NewsletterService.ɵfac,\n  providedIn: 'root'\n});\nexport { NewsletterService };","map":{"version":3,"mappings":";AAEA,SAASA,MAAM,EAAEC,UAAU,EAAaC,OAAO,EAAEC,KAAK,EAAEC,KAAK,QAAQ,yBAAyB;;;AAG9F,MACaC,iBAAiB;EAE5BC,YAAoBC,SAAoB;IAApB,KAAAA,SAAS,GAATA,SAAS;EAAe;EAEtCC,aAAaA,CAACC,UAAsB;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACxCC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC,CAAC,CAAC;MACxC;MACA,MAAMC,aAAa,GAAGb,UAAU,CAACS,KAAI,CAACH,SAAS,EAAE,YAAY,CAAC;MAC9D,MAAMQ,gBAAgB,GAAGZ,KAAK,CAACW,aAAa,EAAEV,KAAK,CAAC,OAAO,EAAE,IAAI,EAAEK,UAAU,CAACO,KAAK,CAAC,CAAC;MACrF,MAAMC,eAAe,SAASf,OAAO,CAACa,gBAAgB,CAAC;MAEvD,IAAIE,eAAe,CAACC,IAAI,GAAG,CAAC,EAAE;QAC5B;QACAN,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC,CAAC,CAAC;QACpC,OAAOM,OAAO,CAACC,MAAM,CAAC,sBAAsB,CAAC;OAC9C,MAAM;QACL;QACA,MAAMC,aAAa,SAASrB,MAAM,CAACc,aAAa,EAAEL,UAAU,CAAC;QAC7DG,OAAO,CAACC,GAAG,CAAC,qCAAqCQ,aAAa,CAACC,EAAE,EAAE,CAAC,CAAC,CAAC;QACtE,OAAOH,OAAO,CAACI,OAAO,CAACF,aAAa,CAACC,EAAE,CAAC;;MAE1CV,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC,CAAC,CAAC;IAAA;EAC5C;;;AAtBWR,iBAAiB;mBAAjBA,iBAAiB,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,SAAA;AAAA;AAAjBtB,iBAAiB;SAAjBA,iBAAiB;EAAAuB,OAAA,EAAjBvB,iBAAiB,CAAAwB,IAAA;EAAAC,UAAA,EADJ;AAAM;SACnBzB,iBAAiB","names":["addDoc","collection","getDocs","query","where","NewsletterService","constructor","firestore","addNewsletter","newsletter","_this","_asyncToGenerator","console","log","newsletterRef","emailExistsQuery","email","emailExistsDocs","size","Promise","reject","newsletterDoc","id","resolve","i0","ɵɵinject","i1","Firestore","factory","ɵfac","providedIn"],"sourceRoot":"","sources":["C:\\Users\\55219\\Desktop\\Studio-Val-em-conclusao\\src\\app\\services\\newsletter.service.ts"],"sourcesContent":["//newsletter.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { addDoc, collection, Firestore, getDocs, query, where } from '@angular/fire/firestore';\r\nimport { Newsletter } from '../newsletter';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class NewsletterService {\r\n\r\n  constructor(private firestore: Firestore) { }\r\n\r\n  async addNewsletter(newsletter: Newsletter): Promise<string> {\r\n    console.log('Iniciando addNewsletter'); // Log adicionado\r\n    // Verifica se o email já existe na coleção\r\n    const newsletterRef = collection(this.firestore, 'newsletter');\r\n    const emailExistsQuery = query(newsletterRef, where('email', '==', newsletter.email));\r\n    const emailExistsDocs = await getDocs(emailExistsQuery);\r\n\r\n    if (emailExistsDocs.size > 0) {\r\n      // Email já existe na coleção\r\n      console.log('Email já cadastrado'); // Log adicionado\r\n      return Promise.reject('Email já cadastrado.');\r\n    } else {\r\n      // Adiciona o documento na coleção\r\n      const newsletterDoc = await addDoc(newsletterRef, newsletter);\r\n      console.log(`Documento adicionado com sucesso: ${newsletterDoc.id}`); // Log adicionado\r\n      return Promise.resolve(newsletterDoc.id);\r\n    }\r\n    console.log('Finalizando addNewsletter'); // Log adicionado\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}