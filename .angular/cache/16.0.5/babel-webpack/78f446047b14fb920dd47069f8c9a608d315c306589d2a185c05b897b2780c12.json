{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/55219/Desktop/Studio-Val-em-conclusao/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport { doc, setDoc, collection } from '@angular/fire/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nclass FeedbackService {\n  constructor(firestore) {\n    this.firestore = firestore;\n    this.display = new BehaviorSubject(false);\n    this.display$ = this.display.asObservable();\n  }\n  addFeedback(survey) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const surveyCollection = collection(_this.firestore, 'satisfacao');\n      const surveyDoc = doc(surveyCollection);\n      yield setDoc(surveyDoc, survey);\n    })();\n  }\n  toggleDisplay() {\n    this.display.next(!this.display.getValue());\n  }\n}\nFeedbackService.ɵfac = function FeedbackService_Factory(t) {\n  return new (t || FeedbackService)(i0.ɵɵinject(i1.Firestore));\n};\nFeedbackService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FeedbackService,\n  factory: FeedbackService.ɵfac\n});\nexport { FeedbackService };","map":{"version":3,"mappings":";AAEA,SAASA,eAAe,QAAQ,MAAM;AAEtC,SAAoCC,GAAG,EAAEC,MAAM,EAAEC,UAAU,QAAQ,yBAAyB;;;AAE5F,MACaC,eAAe;EAI1BC,YAAoBC,SAAoB;IAApB,KAAAA,SAAS,GAATA,SAAS;IAHrB,KAAAC,OAAO,GAAG,IAAIP,eAAe,CAAU,KAAK,CAAC;IACrD,KAAAQ,QAAQ,GAAG,IAAI,CAACD,OAAO,CAACE,YAAY,EAAE;EAEM;EAEtCC,WAAWA,CAACC,MAA0B;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC1C,MAAMC,gBAAgB,GAAGX,UAAU,CAACS,KAAI,CAACN,SAAS,EAAE,YAAY,CAAC;MACjE,MAAMS,SAAS,GAAGd,GAAG,CAACa,gBAAgB,CAAC;MACvC,MAAMZ,MAAM,CAACa,SAAS,EAAEJ,MAAM,CAAC;IAAC;EAClC;EAEAK,aAAaA,CAAA;IACX,IAAI,CAACT,OAAO,CAACU,IAAI,CAAC,CAAC,IAAI,CAACV,OAAO,CAACW,QAAQ,EAAE,CAAC;EAC7C;;AAdWd,eAAe;mBAAfA,eAAe,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,SAAA;AAAA;AAAflB,eAAe;SAAfA,eAAe;EAAAmB,OAAA,EAAfnB,eAAe,CAAAoB;AAAA;SAAfpB,eAAe","names":["BehaviorSubject","doc","setDoc","collection","FeedbackService","constructor","firestore","display","display$","asObservable","addFeedback","survey","_this","_asyncToGenerator","surveyCollection","surveyDoc","toggleDisplay","next","getValue","i0","ɵɵinject","i1","Firestore","factory","ɵfac"],"sourceRoot":"","sources":["C:\\Users\\55219\\Desktop\\Studio-Val-em-conclusao\\src\\app\\feedback\\feedback.service.ts"],"sourcesContent":["// feedback.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { SatisfactionSurvey } from './satisfaction-survey/satisfaction-survey.interface';\r\nimport { Firestore, collectionData, doc, setDoc, collection } from '@angular/fire/firestore';\r\n\r\n@Injectable()\r\nexport class FeedbackService {\r\n  private display = new BehaviorSubject<boolean>(false);\r\n  display$ = this.display.asObservable();\r\n\r\n  constructor(private firestore: Firestore) { }\r\n\r\n  async addFeedback(survey: SatisfactionSurvey) {\r\n    const surveyCollection = collection(this.firestore, 'satisfacao');\r\n    const surveyDoc = doc(surveyCollection);\r\n    await setDoc(surveyDoc, survey);\r\n  }\r\n\r\n  toggleDisplay() {\r\n    this.display.next(!this.display.getValue());\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}